<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<atom:link href="" rel="self" type="application/rss+xml" />
<title>Nechtan</title>
<description></description>
<link>/</link>
<lastBuildDate>Sun, 16 Oct 2022 00:00:00 +0100</lastBuildDate>

<item>
<guid>/articles/openbsd_desktop.html</guid>
<link>/articles/openbsd_desktop.html</link>
<pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="OpenBSD%20Desktop">OpenBSD Desktop</h4>

<p>Everyone loves an OpenBSD Desktop article, don&#8217;t they? So there seems very little point in me reiterating what is a relatively simple process nowadays.  That said, after the install process there are a couple of things which, for me, make OpenBSD the perfect workstation operating system&#8230;</p>

<p><a href="/desktop.png"><img src="/desktop.png" alt="OpenBSD+ratpoison+urxvt+tmux" /></a></p>

<p><strong>TLDR: SCROLL DOWN</strong></p>

<p>In recent years, OpenBSD has become more popular as a desktop&#47;workstation OS, which is quite surprising to many who consider it to be an arcane incarnation of BSD that&#8217;s used only by tinfoil hatters, the BGP bourgeosie, and minimalist mashochists. Improved hardware support, the clean and ~perfect code style, a consistent environment, and the ease of configuration may be some reasons for people moving to the distro.</p>

<p>Personally, I used OpenBSD for years on bare-metal and VM servers as well as building a liveCD distro for occasional use before adopting it full-time.  Out of the box, it is faster and easier to configure than FreeBSD and even most linux distros.  I do still love FreeBSD, but it lacks <em>je ne sais quoi</em> that OpenBSD has at a base level which enables fast configuration and usability whatever you&#8217;re using it on.</p>

<p>I use a clean, minimalist system which maximises productivity without having a bloated userland; here&#8217;s how to reproduce a basic version of it. I am stuck in my ways and haven&#8217;t migrated to cwm(1) yet; also, in the initial version of this article I confused cwm with fvwm because I have fvwm as my wm on another box. Normally I use rxvt-unicode over xterm with ratpoison but following feedback about using a terminal emulator not in base I have modified this article to use xterm; I&#8217;ve also started using a <a href="http://st.suckless.org/patches/solarized/">solarized build of st</a> - but that isn&#8217;t covered here.</p>

<p><strong>TLDR: Start here</strong></p>

<p>First, if you haven&#8217;t done so already, add your user to doas.conf(5), make some performance tweaks to our filesystems in &#47;etc&#47;fstab(5) and grant us more memory (assuming you have at least 4GB) in login.conf(5) (from xterm in cwm):</p>

<pre><code>$ su root -c &#39;vi &#47;etc&#47;doas.conf&#39;
permit nopass keepenv yourusername
$ doas sed -i &#39;s&#47;rw&#47;rw,softdep,noatime&#47;g&#39; &#47;etc&#47;fstab
$ doas sed -i &#39;s&#47;768M&#47;2048M&#47;g&#39; &#47;etc&#47;login.conf 
$ doas reboot
</code></pre>

<p>Install some packages:</p>

<pre><code>pkg_add ImageMagick \
    bzip2 \
    git \
    gnupg \
    iridium \
    w3m \
    mpv \
    inconsolata-font \
    mupdf \
    ratpoison \
    rsync \
    tor-browser \
    rtorrent \
    unzip
</code></pre>

<p>You would be surprised at how many packages in base can do the things you need&#8230; ftp(1) for example is not just an ftp client, but can be used like &#8216;fetch&#8217; to download files over FTP, HTTP, and HTTPS.
 But there are a few packages I consider &#8216;essential&#8217; listed above, some of which you may not know:</p>

<ul>
<li>Iridium is a secure build of Google&#8217;s Chromium source, removing a lot of the spyware and crap left behind.  It also has some proactively secure features, such as password amnesia. Add the <a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb">Vimium</a> extension for decent keyboard-controlled browsing (ProTip: alt-F to start). If you prefer a more pure option, <a href="https://www.reddit.com/user/ander_bsd">ander_bsd</a> recommended vimb and shared his config <a href="https://www.reddit.com/r/openbsd/comments/a2p2gk/openbsd_desktop_for_minimalists/eb02kap/">here</a></li>
<li>mupdf is a simple PDF viewer - but more featureful than xpdf. There is also poppler-utils if you want pdftohtml or pdftotext (and of course poppler itself which is a fork of xpdf).</li>
<li>mpv is a media player based on mplayer</li>
<li>ratpoison is my window-manager of choice. Written in C with tiling. No mouse required (hence the name).</li>
</ul>

<p>I used to start X from the console, but following a woopsie involving Xorg being setuid, OpenBSD revoked that privilege and now users should use xenodm(1) to start X and their window manager. Let&#8217;s create our ratpoison session in ~&#47;.xsession:</p>

<pre><code>xset b off
xrdb -merge ~&#47;.Xresources
xidle -delay 5 -sw -timeout 300 -program "&#47;usr&#47;X11R6&#47;bin&#47;xlock -mode qix" &#38; 
exec &#47;usr&#47;local&#47;bin&#47;ratpoison
</code></pre>

<ul>
<li>The first command stops that awful beeping. As sensitive creatures who sit up late hacking away at something, it&#8217;s too much.</li>
<li>The second merges .Xresources with our current X resources.</li>
<li>Finally, we start a timer for xlock then execute our window manager - ratpoison!</li>
</ul>

<p>A basic ~&#47;.ratpoisonrc:</p>

<pre><code>startup_message off
escape Super_L
bind i exec iridium
bind t exec tor-browser
bind r exec xterm -e rtorrent
bind x exec xterm -fa "xft:Inconsolata:pixelsize=16"
exec &#47;usr&#47;local&#47;bin&#47;rpws init 6 -k
exec xterm -fa "xft:Inconsolata:pixelsize=16"
</code></pre>

<ul>
<li>Stop telling us about the help shortcut</li>
<li>Use the Windows&#47;Meta&#47;Left-Super key instead of C-t</li>
<li>Bind keys to applications</li>
<li>Create 6 virtual desktops&#47;workstations</li>
<li>Start xterm when ratpoison starts</li>
</ul>

<p>As much as I like the retro SunOS look of xterm with a white background, I like to tweak the look slightly in ~&#47;.Xresources:</p>

<pre><code>*visualBell: True 
xterm.loginShell: true 
xterm*faceName: Inconsolata:size=16
xterm*dynamicColors: true
xterm*utf8: 2
xterm*eightBitInput: true
xterm*scrollBar: false
xterm*foreground: rgb:a8&#47;a8&#47;a8
xterm*background: rgb:00&#47;00&#47;00
</code></pre>

<p>*visualBell flashes the screen since we have the audible bell disabled. Perhaps not a great idea if you have certain forms of epilepsy; Keep pressing backspace for more info.</p>

<p>Press Ctrl-Alt-Backspace to restart X and return to Xenodm, then login again.</p>

<p>You should now be presented with a lovely rxvt terminal with a black background. Here are some keyboard shortcuts to help you get started:</p>

<ul>
<li>ALT+F1-F6 - Change to desktop&#47;workstation 1-6</li>
<li>WIN x - start urxvt</li>
<li>WIN i - start iridium browser</li>
<li>WIN t - start Tor browser</li>
<li>WIN r - start rtorrent </li>
<li>WIN ! - execute command</li>
<li>WIN SHIFT+K - kill current window</li>
<li>WIN ? - show all keyboard shortcuts</li>
</ul>

<p>As for tmux(1) which is included in base and a window manager (albeit for shells) in its own right, CTRL-b :split-window -h, :split-window, and the arrow keys are your friends.</p>

<p>Have fun! </p>

]]></description>
</item>

<item>
<guid>/articles/gophernicus.html</guid>
<link>/articles/gophernicus.html</link>
<pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="Down%20the%20Gopher%20hole%20with%20OpenBSD,%20Gophernicus,%20and%20TLS">Down the Gopher hole with OpenBSD, Gophernicus, and TLS</h4>

<p><strong>UPDATE: I&#8217;ve added TLS support to Gophernicus so you don&#8217;t need to use stunnel anymore. The code is ugly and unpolished though so I wouldn&#8217;t recommend for production use.</strong> </p>

<ul>
<li><a href="https://github.com/0x16h/gophernicus">https:&#47;&#47;github.com&#47;0x16h&#47;gophernicus</a></li>
<li><a href="https://github.com/0x16h/gophernicus/blob/master/INSTALL.openbsd">INSTALL.openbsd</a></li>
</ul>

<p><img src="/gopher-tls.png" alt="Gophernicus+TLS" /></p>

<p>In the early 2000s I thought I had seen the worst of the web - Java applets, Macromedia (&#62;Adobe) Flash, animated GIFs, javascript snow that kept you warm in the winter by burning out your CPU, and so on.  For a time we learned from these mistakes, and started putting the burden on the server-side - then with improvements in javascript engines we started abusing it again with JSON&#47;AJAX and it all went down hill from there.</p>

<p>Like cloud computing, blockchains, machine learning and a tonne of other a la mode technologies around today - most users and service providers don&#8217;t need websites that consume 1GB of memory processing JS and downloading 50MB of compressed data just to read Alice&#8217;s one-page travel blog or Bob&#8217;s notes on porting NetBSD to his blood-pressure monitor.</p>

<p>Before the HTTP web we relied on Prestel&#47;Minitel style systems, BBS systems, and arguably the most accessible of all - Gopher! Gopher was similar to the locally accessed AmigaGuide format, in that it allowed users to search and retrieve documents interactively, with links and cross-references. Its efficiency and distraction-free nature make it attractive to those who are tired of the invasive, clickbait, ad-filled, javascript-laden web2&#47;3.x. But enough complaining and evangelism - here&#8217;s how to get your own Gopher Hole!</p>

<p>Gophernicus is a modern gopher daemon which aims to be secure (although it still uses inetd -_-); it&#8217;s even in OpenBSD ports so at least we can rely on it to be reasonably audited. Let&#8217;s install that and also an ncurses-based gopher client (or lynx(1)) to test things out later:</p>

<pre><code>$ doas pkg_add gophernicus gopher
</code></pre>

<p>If you plan on offering Gopher over TLS:</p>

<pre><code>$ doas pkg_add stunnel
</code></pre>

<p>Instruct inetd(8) how to handle gopher connections (defaults to port 70 TCP) by adding this to &#47;etc&#47;inetd.conf</p>

<pre><code>gopher stream tcp nowait _gophernicus &#47;usr&#47;local&#47;libexec&#47;in.gophernicus in.gophernicus -h go.cryogenix.net
</code></pre>

<ul>
<li>Replace go.cryogenix.net with your FQDN. </li>
<li>Add <strong>-T 343</strong> if you plan on using TLS on port 343 (IANA has no port allocated for Gopher over TLS but 343 is unassigned and I came across a post with someone mentioning it as a possibility).</li>
</ul>

<p>See <strong>&#47;usr&#47;local&#47;share&#47;doc&#47;gophernicus&#47;README</strong> for a full listing of command-line arguments and usage options; Gophernicus is feature-rich so it&#8217;s recommended you RTFM carefully.</p>

<p>If you are using TLS, add a [gophernicus] service to &#47;etc&#47;stunnel&#47;stunnel.conf. For the cert and key, I just added an alternative name for my domain in &#47;etc&#47;acme-client.conf, moved the old cert and ran <strong>acme-client -vFAD cryogenix.net</strong> to update my Let&#8217;s Encrypt cert:</p>

<pre><code>[gophernicus]
cert = &#47;etc&#47;ssl&#47;cryogenix.net.crt
key = &#47;etc&#47;ssl&#47;private&#47;cryogenix.net.key
accept = 343
connect = 127.0.0.1:70
protocol = proxy
</code></pre>

<p>Create a directory for our virtual host&#8217;s gopher hole and copy the default &#8216;index&#8217; to it so we can test it:</p>

<pre><code>$ doas mkdir &#47;var&#47;gopher&#47;go.cryogenix.net
$ doas cp &#47;var&#47;gopher&#47;gophermap &#47;var&#47;gopher&#47;go.cryogenix.net&#47;
</code></pre>

<p>Enable and start inetd (and optionally stunnel):</p>

<pre><code>$ rcctl enable inetd
$ rcctl start inetd

$ rcctl enable stunnel
$ rcctl start stunnel
</code></pre>

<p>If you had no errors, you should now be able to use gopher(1) to connect to your server - either by hostname [and optional port] or gopher:&#47;&#47; url.</p>

<pre><code>$ gopher gopher:&#47;&#47;go.cryogenix.net
</code></pre>

<p>If you used stunnel(1) to TLSify Gophernicus, one way you can connect with gopher(1) over TLS on port 343 is by using stunnel(1) on the client or socat(1):</p>

<pre><code>$ pkg_add stunnel
</code></pre>

<p>Add the following to &#47;etc&#47;stunnel&#47;stunnel.conf:</p>

<pre><code>[gophers]
client = yes
accept = 127.0.0.1:10343
connect = &#60;hostname&#62;:343
CApath = &#47;etc&#47;ssl&#47;cert.pem
</code></pre>

<p>Then start stunnel with rcctl and connect gopher to 127.0.0.1:10343.</p>

<p>Alternatively, with socat:</p>

<pre><code>$ doas pkg_add socat
$ socat TCP4-LISTEN:10070 openssl-connect:go.cryogenix.net:343,cafile=&#47;etc&#47;ssl&#47;cert.pem,method=TLS1.2,verify=0,reuseaddr &#38;
$ gopher gopher:&#47;&#47;localhost:10070
</code></pre>

<h5 id="Caveats">Caveats</h5>

<ul>
<li>when connecting to stunnel, libressl returns error 21 (unable to verify first cert) - however the same cert returns no error on port 443 (httpd(8)).</li>
<li>socat(1) will die when the connection is closed or reaches EOF, which is on every gopher request. Normally we would add the &#8216;fork&#8217; option to the end of the openssl-connect command but for some reason it causes gopher(1) to become a runaway process and eat up CPU time.</li>
</ul>

<p>If you need a starting point with Gopher, SDF-EU&#8217;s wiki has a good article <a href="https://sdfeu.org/w/tutorials:gopher">here</a>.</p>

<p>Finally, if you don&#8217;t like gopher(1) - there&#8217;s always lynx(1) or <a href="https://cryogenix.net/NCSA_Mosaic_OpenBSD.html">NCSA Mosaic</a>!</p>

<p><img src="/gop2.jpg" alt="Gopher client viewing cryogenix" />
<img src="/gop3.jpg" alt="Gopher client viewing cryogenix" />
<img src="/gop.jpg" alt="Gopher on Mosaic Screenshot" /></p>

]]></description>
</item>

<item>
<guid>/articles/openbsd_assembly.html</guid>
<link>/articles/openbsd_assembly.html</link>
<pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="Assembly%20language%20on%20OpenBSD%20amd64+arm64">Assembly language on OpenBSD amd64+arm64</h4>

<p>This is a short introduction to assembly language programming on OpenBSD&#47;amd64+arm64.  Because of security features in the kernel, I have had to rethink a series of tutorials covering Aarch64 assembly language on OpenBSD, and therefore this will serve as a placeholder-cum-reminder.</p>

<p>OpenBSD, like many UNIX and unix-like operating systems, now uses the Executable and Linkable Format (ELF) for its binary libraries and executables.  Although the structure of this format is beyond the scope of this short introduction, it is necessary for me to explain part of one of the headers.</p>

<p>Within the program header there are sections known as PT_NOTE that OpenBSD and other systems use to distinguish their ELF executables - OpenBSD looks for this section to check if it should attempt to execute the program or not.</p>

<p>The section uses a structure similar to the following:</p>

<pre><code>PT_NOTE {
    long    namesz;   &#47;* size of name *&#47;
    long    descsz;   &#47;* size of desc *&#47;
    long    type;     &#47;* ABI type? *&#47;
    char    name;     &#47;* ABI&#47;vendor name *&#47;
    long    desc;     &#47;* description *&#47;
}
</code></pre>

<p>For our assembled programs to link and execute correctly, we must create this section; If you are an ld(1) wizard, you can also use PHDRS to accomplish this. </p>

<h5 id="Our%20first%20program:%20in%20C!">Our first program: in C!</h5>

<p>It&#8217;s often a good idea to prototype your assembly programs in a high level language such as C - it can then double up as both a set of notes and a working program that you can debug and compile into assembly language to compare with your own asm code. Create sysexit.c:</p>

<pre><code>#include &#60;unistd.h&#62;
#include &#60;sys&#47;syscall.h&#62;

int
main(void)
{
    syscall(SYS_exit, 123);
return 0;
}
</code></pre>

<p>OK, return 0 here is a little redundant as we have already called SYS_exit() to exit our program.</p>

<p>Compile with LLVM:</p>

<pre><code>clang -o sysexit sysexit.c
</code></pre>

<p>Or with GNU:</p>

<pre><code>gcc -o sysexit sysexit.c
</code></pre>

<p>If you run the program, it should do nothing - just silently exit and return you to the shell prompt.  Exciting! Next we will rewrite this program in assembly language.</p>

<h5 id="Our%20first%20program:%20in%20x86-64%20Asm%20(AT&amp;#38;T&amp;#47;GAS%20syntax)">Our first program: in x86-64 Asm (AT&#38;T&#47;GAS syntax)</h5>

<p>x86-64 General Purpose Registers:</p>

<pre><code>RAX    Accumulator
RBX    Base
RCX    Counter
RDX    Data (can extent Accumulator)
RSI    Source Index for string ops
RDI    Destination Index for string ops
RSP    Stack Pointer
RBP    Base Pointer
R8-15  General purpose 
</code></pre>

<p>System calls such as exit&#47;SYS_exit are defined in <strong>sys&#47;syscall.h</strong> - assemblers, unlike C compilers, can&#8217;t use these C&#47;C++ include files so we need to extract defines and macros from them to implement in assembly. That said, some fancy assemblers such as FASM and NASM may provide macros for common types and functions&#8230; but we&#8217;re good purists so won&#8217;t mention those. </p>

<p>If you look at &#47;usr&#47;include&#47;sys&#47;syscall.h you will see SYS_exit is defined near the top of the file:</p>

<pre><code>&#47;* syscall: "exit" ret: "void" args: "int" *&#47;
#define SYS_exit    1
</code></pre>

<p>Our exit syscall returns void and takes one int as an argument. SYS_exit itself is is defined as &#8216;1&#8217;.  So when we make a syscall and pass SYS_exit, we are actually passing an integer that represents the function.</p>

<p>Syscall numbers are loaded into the rax register, and any parameters are put int rdi, rsi, rdx, etc. Any return value is left in rax.</p>

<p>Equipped with this knowledge and the previous notes about the ELF program header, we can write our first assembly program, sysexit.s:</p>

<pre><code>.section ".note.openbsd.ident", "a"
    .p2align 2      &#47;* padding *&#47;
    .long 0x8       &#47;* namesz *&#47;
    .long 0x4       &#47;* descsz *&#47;
    .long 0x1       &#47;* type *&#47; 
    .ascii "OpenBSD"      &#47;* name *&#47;
    .long 0x0       &#47;* desc *&#47;
    .p2align 2      

.section .text      &#47;* .text section begins *&#47;
.globl _start       &#47;* make _start symbol global&#47;known to ld *&#47;
_start:
movq $1,%rax        &#47;* copy 1 (SYS_exit) into rax register *&#47;
movq $123,%rdi      &#47;* 1st parameter: 123 *&#47;
syscall         &#47;* call syscall (int 0x80 on 32-bit) *&#47;
</code></pre>

<p>Assemble and link with GNU tools:</p>

<pre><code>$ as sysexit.s -o sysexit.o
$ ld sysexit.o -o sysexit --dynamic-linker &#47;usr&#47;libexec&#47;ld.so
</code></pre>

<p>For a static executable:</p>

<pre><code>$ ld -e _start -static sysexit.o -o sysexit
</code></pre>

<ul>
<li>-e _start instructs the linker to use _start as an entry symbol&#47;point</li>
<li>-static is required otherwise the resulting shared executable will look for &#47;lib&#47;ld64.so.1 (which doesn&#8217;t exist) - thanks &#47;u&#47;Kernigh!</li>
</ul>

<p>Execute our program and print the exit code:</p>

<pre><code>$ .&#47;sysexit
$ echo $?
</code></pre>

<h5 id="Our%20first%20program:%20in%20inline%20x86-64%20assembly">Our first program: in inline x86-64 assembly</h5>

<p>Nowadays it&#8217;s often desirable to use inline assembly language within C programs; this allows precision control of registers and optimised routines to be made while retaining the beautiful ANSI C language for the bulk of the code.  Here&#8217;s how we implement our program using inline asm, inline.c:</p>

<pre><code>int
main(void)
{
    __asm__("mov $123, %rdi 
	"
            "mov $1, %rax 
	"
            "syscall");
}
</code></pre>

<p>Or if you want to use C variables, you could do:</p>

<pre><code>int
main(void) {
        register int arg __asm__("rdi") = 123;
        register int scall __asm__("rax") = 1;
        __asm__("syscall");
}
</code></pre>

<p>Compile as you normally would:</p>

<pre><code>$ cc -o inline inline.c
$ .&#47;inline
$ echo $?
123
</code></pre>

<p>Done! </p>

<h5 id="Our%20first%20program:%20in%20x86-64%20asm%20(NASM%20syntax)">Our first program: in x86-64 asm (NASM syntax)</h5>

<pre><code>section .note.openbsd.ident progbits alloc noexec nowrite
    dd 0x00000008 ; namesz
    dd 0x00000004 ; descsz
    dd 0x00000001 ; type
    dd "OpenBSD", 0x00, 0x00 ; name
    dd 0x00000000

section .text
    global _start

_start:
    mov eax,0x01    ; SYS_exit
    push 0x01   ; parameter 1
    syscall     ; call syscall
</code></pre>

<p>Assemble and link:</p>

<pre><code>nasm -f elf64 sysexit-nasm.s -o sysexit-nasm.o
&#47;* ld -e _start -static -o sysexit-nasm sysexit-nasm.o *&#47;
ld -o sysexit-nasm sysexit-nasm.o --dynamic-linker &#47;usr&#47;libexec&#47;ld.so 
</code></pre>

<h5 id="Our%20first%20program:%20in%20ARMv8%20AArch64%20assembly">Our first program: in ARMv8 AArch64 assembly</h5>

<p>AArch64 is the 64-bit state of ARMv8 processors; these processors can run a 32-bit kernel with 32-bit userland, or a 64-bit kernel with both 32 and 64-bit userland.  The architecture changes a little when in the 64-bit state.</p>

<p>Registers:</p>

<pre><code>X0 - X7      = Argument &#47; results registers
X8           = indirect result location
X9 - X15         = temporary registers
X16 - X17        = temporary intra-proc call
X18          = platform register
X19 - X29        = Callee-saved register (must preserve)
X30          = link register
</code></pre>

<p>sysexit-arm.s:</p>

<pre><code>.section ".note.openbsd.ident", "a"
.p2align 2
.long    0x8
.long    0x4
.long    0x1
.ascii    "OpenBSD"
.long    0x0
.p2align 2

.text
.globl _start 
_start:
    mov x0, #123    &#47;* copy 123 to x0 - reverse of AT&#38;T syntax *&#47;
    mov x8, #1  &#47;* copy 1 into x8
    svc #0      &#47;* supervisor instruction - formerly swi *&#47;
</code></pre>

<p>Assemble and link:</p>

<pre><code>$ gas sysexit-arm.s -o sysexit-arm.o
$ ld sysexit-arm.o -o sysexit-arm --dynamic-linker &#47;usr&#47;libexec&#47;ld.so 

$ .&#47;sysexit-arm
$ echo $?
</code></pre>

<p>And we&#8217;re done!</p>

]]></description>
</item>

<item>
<guid>/articles/openbsd_crosscompiling_arm64.html</guid>
<link>/articles/openbsd_crosscompiling_arm64.html</link>
<pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="Cross-compiling%20for%20OpenBSD&amp;#47;arm64">Cross-compiling for OpenBSD&#47;arm64</h4>

<p>Following on from <a href="https://cryogenix.net/OpenBSD_arm64_qemu.html">OpenBSD&#47;arm64 on QEMU</a>, it&#8217;s not always practical to compile userland software or a new kernel on some systems, particularly small SoCs with limited space and memory - or indeed QEMU, in fear of melting your CPU. </p>

<p>There are two scenarios here - the first, if you are looking for a standard cross-compiler for Aarch64, and the second if you want an OpenBSD-specific environment.</p>

<h4 id="Scenario%201:%20Linaro%20ARM&amp;#47;AArch64%20toolchain">Scenario 1: Linaro ARM&#47;AArch64 toolchain</h4>

<p>Available in ports, this is the go-to GCC toolchain for cross-compilation to ARM targets.  aarch64-none-elf-gcc-linaro is relatively new and there doesn&#8217;t exist a port for gdb nor newlib as yet.</p>

<p>This will pull in binutils and gcc, which will be installed to &#47;usr&#47;local&#47;aarch64-none-elf-*:</p>

<pre><code>doas pkg_add aarch64-none-elf-gcc-linaro
</code></pre>

<p>The 32-bit ARM toolchain is also available, which includes GDB and newlib for the ARM target. 32-bit ARM binaries will run on Aarch64, which is why you see devices such as the Raspi3 having 32-bit or mixed-arch operating systems (64-bit kernel, 32-bit userland for example).</p>

<pre><code>doas pkg_add arm-none-eabi-gcc-linaro 
doas pkg_add arm-none-eabi-gdb
doas pkg_add arm-none-eabi-newlib
</code></pre>

<p>This will give us a traditional cross-compilation environment with gdb built to use your host, in my case x86_64-unknown-openbsd6.4 and a target of arm-none-eabi. Newlib is an implementation of the standard C library which was intended to be a free library for embedded devices and is popular with OS development hobbyists at stages where they have not written their own implementations.  This will allow us to write and compile C code that uses the std C library.</p>

<h4 id="Scenario%202:%20OpenBSD%20aarch64%20development">Scenario 2: OpenBSD aarch64 development</h4>

<p>Cross-building is unsupported on OpenBSD - if you&#8217;ve ever dabbled in OS development or LinuxFromScratch, you can probably guess why; it can be unpredictable.
Moreover, the OpenBSD platform lifecycle focuses on making OpenBSD self-hosting and only cross-compiles to the target platform for initial bootstrapping.</p>

<p>There, you have been duly warned; now let&#8217;s get down to building our AArch64 toolchain!</p>

<p>I must admit, I have never looked at &#47;usr&#47;src&#47;Makefile.cross before - so instead of jumping in I had a look to see if there was any existing resources on the process.</p>

<ul>
<li><a href="https://gist.github.com/uebayasi/6328591">openbsd-cross-building-tips</a> by <a href="https://github.com/uebayasi">Masao Uebayashi</a></li>
<li><a href="http://openbsd-archive.7691.n7.nabble.com/error-in-cross-compiling-for-armv7-td300810.html">arm@ list: error in cross-compiling for armv7</a></li>
</ul>

<p>As the process is unsupported anyway, I&#8217;m not using &#47;usr&#47;src. We can&#8217;t even build a release without hacking to death the Makefiles and wrappers so that may be in a future article.  Grab the source somewhere in your home dir:</p>

<pre><code>mkdir arm64
cd arm64
cvs -qd anoncvs@anoncvs.fr.openbsd.org:&#47;cvs checkout -rOPENBSD_6_4 -P src
</code></pre>

<p>Set some environment variables for our build tree:</p>

<pre><code>target=arm64
topdir=${HOME}&#47;arm64
srcdir=${topdir}&#47;src
destdir=${topdir}&#47;dest.${target}
objdir=${topdir}&#47;obj.${target}
toolsdir=${topdir}&#47;tools.${target}
cd ${srcdir}
</code></pre>

<p>As root, we create the directories for our toolchain, set the environment, then build the toolchain itself.  Aarch64 is strictly an llvm&#47;lld platform on OpenBSD (thanks, brynet!) - but for some reason when I tried to build the toolchain it complained about ld.bfd being missing from somewhere in ${destdir}&#8230; quick solution: touch the file and run make again as below!</p>

<pre><code>doas make -f Makefile.cross TARGET=${target} CROSSDIR=${destdir} cross-env
doas make -f Makefile.cross TARGET=${target} CROSSDIR=${destdir} cross-dirs
doas make -f Makefile.cross TARGET=${target} CROSSDIR=${destdir} cross-tools
</code></pre>

<p>Build and install Aarch64 userland to our destination:</p>

<pre><code>doas make -f Makefile.cross TARGET=${target} CROSSDIR=${destdir} cross-distrib
</code></pre>

<p>Create some convient links</p>

<pre><code>ln -sf ${destdir}&#47;usr&#47;obj ${objdir}
ln -sf ${destdir}&#47;usr&#47;${target}-unknown-openbsd6.4 ${toolsdir}
</code></pre>

<p>chown everything back to your user and group (modify as required):</p>

<pre><code>doas chown -R ${USER}:${USER} ${objdir}&#47;*
</code></pre>

<p>Finally, test our environment out by compiling a C file with cc (clang):</p>

<pre><code>$ eval export $( make -f Makefile.cross TARGET=${target} CROSSDIR=${destdir} cross-env )
$ cd ..
$ cat &#60;&#60;EOF &#62;&#62;hello.c
#include &#60;stdio.h&#62;

int
main(void) {
    printf("Hello Aarch64
");
}
EOF

$ ${CC} -o hello hello.c
$ file hello
hello: ELF 64-bit LSB shared object, AArch64, version 1

$ ${destdir}&#47;usr&#47;aarch64-unknown-openbsd6.4&#47;bin&#47;readelf -h hello

ELF Header:
Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
Class:                             ELF64
Data:                              2&#39;s complement, little endian
Version:                           1 (current)
OS&#47;ABI:                            UNIX - System V
ABI Version:                       0
Type:                              DYN (Shared object file)
Machine:                           AArch64
&#60;--CUT--&#62;
</code></pre>

<p>All working as expected!</p>

]]></description>
</item>

<item>
<guid>/articles/openbsd_arm64_qemu.html</guid>
<link>/articles/openbsd_arm64_qemu.html</link>
<pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="OpenBSD&amp;#47;arm64%20on%20QEMU%20with%20networking">OpenBSD&#47;arm64 on QEMU with networking</h4>

<p>With the increasing popularity of ARM64&#47;AArch64 systems, from the Raspberry Pi 3 and PINE64 to Fujitsu&#8217;s move away from SPARC64 supercomputers, there hasn&#8217;t been a better time to get started with learning this architecture.</p>

<p>I wanted to make a start to an Aarch64 assembly language tutorial but didn&#8217;t have access to my RPi3, so I looked into the state of QEMU&#8217;s emulation. I didn&#8217;t need RPi3-specific hardware - which is just as well as I can&#8217;t remember off-hand how the bootcode and start.elf crap would work with QEMU - anyway, I opted for a generic device using Linaro&#8217;s EDK2 UEFI firmware.</p>

<p>The first pre-built EDK2 binary I downloaded wouldn&#8217;t play nicely with the OpenBSD kernel so I grabbed a release mentioned by the <a href="https://wiki.freebsd.org/arm64/QEMU">FreeBSD team</a> - which worked.</p>

<h4 id="Prerequisites">Prerequisites</h4>

<ul>
<li>OpenBSD&#47;amd64 host</li>
<li>miniroot64.fs (arm64)</li>
<li><a href="http://releases.linaro.org/components/kernel/uefi-linaro/16.02/release/qemu64/QEMU_EFI.fd">QEMU_EFI.fd</a> (v16.02) </li>
<li>QEMU (doas pkg_add qemu)</li>
</ul>

<h4 id="Network%20Prep">Network Prep</h4>

<p>The procedure here is pretty much identical to that outlined in <a href="https://www.openbsd.org/faq/faq16.html">faq16</a>. We create a vether0 and bridge0 interface for our tap interface to NAT through egress.</p>

<pre><code>$ doas su -
# echo &#39;inet 192.168.54.1 255.255.255.0 NONE&#39; &#62;&#47;etc&#47;hostname.vether0
# echo &#39;add vether0&#39; &#62;&#47;etc&#47;hostname.bridge0
# sh &#47;etc&#47;netstart vether0 
# sh &#47;etc&#47;netstart bridge0 
# sysctl net.inet.ip.forwarding=1
</code></pre>

<p>Add the following rule to &#47;etc&#47;pf.conf (replace egress if necessary with your network_interface:0):</p>

<pre><code>match out on egress from vether0:network to any nat-to (egress)
</code></pre>

<p>Reload our pf configuration:</p>

<pre><code># pfctl -f &#47;etc&#47;pf.conf
</code></pre>

<p>Create &#47;etc&#47;dhcpd.conf so your VM can use dhcp:</p>

<pre><code>option domain-name "cryogenix.net"
option domain-name-servers 1.1.1.1;

subnet 192.168.54.0 netmask 255.255.255.0 {
    option routers 192.168.54.1;
    range 192.168.54.100 192.168.54.199;
}
</code></pre>

<p>Start dhcpd:</p>

<pre><code># rcctl -f start dhcpd
</code></pre>

<h4 id="Preparing%20QEMU">Preparing QEMU</h4>

<p>Fetch miniroot64.fs, SHA256, SHA256.sig, and QEMU_EFI.fd:</p>

<pre><code>$ ftp https:&#47;&#47;cdn.openbsd.org&#47;pub&#47;OpenBSD&#47;6.4&#47;arm64&#47;{SHA256,SHA256.sig,miniroot64.fs}
$ ftp http:&#47;&#47;releases.linaro.org&#47;components&#47;kernel&#47;uefi-linaro&#47;16.02&#47;release&#47;qemu64&#47;QEMU_EFI.fd 
$ signify -Cp &#47;etc&#47;signify&#47;openbsd-64-base.pub -x SHA256.sig miniroot64.fs
</code></pre>

<p>Create a qcow2 image to use as our disk:</p>

<pre><code>$ qemu-img create -f qcow2 root.qcow2 10G
</code></pre>

<h4 id="Booting%20miniroot64.fs">Booting miniroot64.fs</h4>

<p>Thanks to <a href="https://marc.info/?l=openbsd-arm&amp;m=151582483025728&amp;w=2">jsg@</a> for the -M and -device arguments to use instead of -M raspi3.</p>

<pre><code>doas sh -c "qemu-system-aarch64 -runas $USER \
-m 2048 \
-M virt \
-cpu cortex-a57 \
-bios QEMU_EFI.fd \
-device virtio-rng-device \
-drive file=miniroot64.fs,format=raw,id=drive1 \
-netdev tap,id=net0 -device virtio-net-device,netdev=net0 \
-drive file=root.qcow2,if=none,id=drive0,format=qcow2 \
-device virtio-blk-device,drive=drive0 \
-nographic \
-serial tcp::4450,server,telnet,wait"
</code></pre>

<p>In another terminal (hello, tmux!):</p>

<pre><code>$ telnet localhost 4450
&#62;&#62; OpenBSD&#47;arm64 BOOTAA64 0.13
boot&#62;
</code></pre>

<p>Proceed to install OpenBSD as normal; at set selection -x* -g* is recommended. To boot into your new system, remove the line with miniroot64.fs from the command above and perhaps saving the full command as a shell script for your convenience. We don&#8217;t need the serial console anymore if you elected to start sshd at boot, so the -serial line could either be removed or changed to &#8216;-serial FILE:serial.log&#8217;.</p>

<pre><code>Tue Nov 13 16:43:48 GMT 2018

OpenBSD&#47;arm64 (foo.cryogenix.net) (console)

login:
</code></pre>

<p>Done.</p>

<pre><code>$ uname -a
OpenBSD foo.cryogenix.net 6.4 GENERIC#511 arm64

$ sysinfo.pl
Hostname: foo - OS: OpenBSD 6.4&#47;arm64 - CPU:  - Processes: 31 
Uptime: 2m - Users: 1 - Load Average: 1.19 - 
Memory Usage: 26.94MB&#47;1990.47MB (1.35%) - 
Disk Usage: 0.62GB&#47;9.73GB (6.42%)

cc -dumpmachine: aarch64-unknown-openbsd6.4
</code></pre>

<p>As always, thank you for reading and all feedback is welcome. </p>

]]></description>
</item>

<item>
<guid>/articles/RET_level1.html</guid>
<link>/articles/RET_level1.html</link>
<pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="Reverse%20Engineering%20Tutorial:%20level1%20-%20What&amp;#8217;s%20the%20password?">Reverse Engineering Tutorial: level1 - What&#8217;s the password?</h4>

<p>Welcome to level1 of the Reverse Engineering Tutorial.  I will be using OpenBSD 6.4&#47;amd64 to demonstrate one way to solve level1 of the 
Cryogenix wargame (yet TBA).</p>

<p>You may download the binary, or if you&#8217;re a bit tinfoilhat-inclined the source is also available.  You&#8217;ll also need gdb (lldb will be added at 
a later date), binutils, and optionally Vim.</p>

<h5 id="Get%20level1">Get level1</h5>

<p>Binary (OpenBSD&#47;amd64):</p>

<pre><code>ftp https:&#47;&#47;cryogenix.net&#47;RET&#47;level1&#47;level1
</code></pre>

<p>Source:</p>

<pre><code>ftp https:&#47;&#47;cryogenix.net&#47;RET&#47;level1&#47;level1.c
gcc -fno-stack-protector -o level1 level1.c
</code></pre>

<h5 id="Let&amp;#8217;s%20begin&amp;#8230;">Let&#8217;s begin&#8230;</h5>

<pre><code>.&#47;level1

Welcome to Cryogenix
Password: 12345

12345 is incorrect!
$
</code></pre>

<p>Our goal is, if it wasn&#8217;t immediately obvious, to find the correct password - or otherwise access what requires the correct password to 
level1.  This could be accomplished through static (disassembly) techniques, but that would be boring!  Let&#8217;s load our binary into gdb:</p>

<pre><code>$ gdb level1
</code></pre>

<p>Set a breakpoint on main() and run the program to see what we&#8217;re dealing with</p>

<pre><code>(gdb) b main
Breakpoint 1 at 0x772
(gdb) r
Breakpoint 1 at 0x54486b00772
Breakpoint 1, 0x0000054486b00772 in main ()
    from &#47;home&#47;level1&#47;level1
</code></pre>

<p>Next we instruct gdb to disassemble the current function:</p>

<pre><code>(gdb) disas

Dump of assembler code for function main:
0x0000054486b0076e &#60;main+0&#62;:    push   %rbp
76f &#60;main+1&#62;:    mov    %rsp,%rbp
772 &#60;main+4&#62;:    lea    1050137(%rip),%rdi   # 0x54486c
779 &#60;main+11&#62;:   callq  0x54486b003a0 &#60;__init+80&#62;
77e &#60;main+16&#62;:   lea    1050147(%rip),%rdi   # 0x54486c00da8
785 &#60;main+23&#62;:   mov    $0x0,%eax
78a &#60;main+28&#62;:   callq  0x54486b00370 &#60;__init+32&#62;
78f &#60;main+33&#62;:   mov    $0x0,%eax
794 &#60;main+38&#62;:   callq  0x54486b00700 &#60;checkpass&#62;
799 &#60;main+43&#62;:   leaveq
79a &#60;main+44&#62;:   retq
79b &#60;main+45&#62;:   int3
End of assembler dump.
</code></pre>

<p>We&#8217;re fortunate here that gdb is aware of a function named &#8216;checkpass&#8217; - so there&#8217;s no point teasing you with the other calls that could be 
interesting but probably are not; it&#8217;s safe to assume they are printing text to stdout ;).  Let&#8217;s create a breakpoint on checkpass():</p>

<pre><code>(gdb) b checkpass
Breakpoint 2 at 0xe4f6ee00704
(gdb) c
Continuing.

Welcome to Cryogenix

Breakpoint 2, 0x00000e4f6ee00704 in checkpass ()
    from &#47;home&#47;level1&#47;level1
(gdb) disas

Dump of assembler code for function checkpass:
0x00000e4f6ee00700 &#60;checkpass+0&#62;:       push   %rbp
0x00000e4f6ee00701 &#60;checkpass+1&#62;:       mov    %rsp,%rbp
0x00000e4f6ee00704 &#60;checkpass+4&#62;:       sub    $0x10,%rsp
0x00000e4f6ee00708 &#60;checkpass+8&#62;:       lea    0xfffffffffffffff3(%rbp),%rdi
0x00000e4f6ee0070c &#60;checkpass+12&#62;:      callq  0xe4f6ee005e4 &#60;gets&#62;
0x00000e4f6ee00711 &#60;checkpass+17&#62;:      lea    0xfffffffffffffff3(%rbp),%rsi
0x00000e4f6ee00715 &#60;checkpass+21&#62;:      lea    2103524(%rip),%rdi        # 0xe4f6f002000 &#60;password&#62;
0x00000e4f6ee0071c &#60;checkpass+28&#62;:      callq  0xe4f6ee003c0 &#60;__init+112&#62;
0x00000e4f6ee00721 &#60;checkpass+33&#62;:      mov    %eax,0xfffffffffffffffc(%rbp)
0x00000e4f6ee00724 &#60;checkpass+36&#62;:      cmpl   $0x0,0xfffffffffffffffc(%rbp)
0x00000e4f6ee00728 &#60;checkpass+40&#62;:      jne    0xe4f6ee0074d &#60;checkpass+77&#62;
0x00000e4f6ee0072a &#60;checkpass+42&#62;:      lea    0xfffffffffffffff3(%rbp),%rsi
0x00000e4f6ee0072e &#60;checkpass+46&#62;:      lea    1050155(%rip),%rdi        # 0xe4f6ef00d60 &#60;__fini+1050048&#62;
0x00000e4f6ee00735 &#60;checkpass+53&#62;:      mov    $0x0,%eax
0x00000e4f6ee0073a &#60;checkpass+58&#62;:      callq  0xe4f6ee00370 &#60;__init+32&#62;
0x00000e4f6ee0073f &#60;checkpass+63&#62;:      lea    1050155(%rip),%rdi        # 0xe4f6ef00d71 &#60;__fini+1050065&#62;
0x00000e4f6ee00746 &#60;checkpass+70&#62;:      callq  0xe4f6ee003a0 &#60;__init+80&#62;
0x00000e4f6ee0074b &#60;checkpass+75&#62;:      jmp    0xe4f6ee0076c &#60;checkpass+108&#62;
0x00000e4f6ee0074d &#60;checkpass+77&#62;:      lea    0xfffffffffffffff3(%rbp),%rsi
0x00000e4f6ee00751 &#60;checkpass+81&#62;:      lea    1050151(%rip),%rdi        # 0xe4f6ef00d7f &#60;__fini+1050079&#62;
0x00000e4f6ee00758 &#60;checkpass+88&#62;:      mov    $0x0,%eax
0x00000e4f6ee0075d &#60;checkpass+93&#62;:      callq  0xe4f6ee00370 &#60;__init+32&#62;
0x00000e4f6ee00762 &#60;checkpass+98&#62;:      mov    $0x1,%edi
0x00000e4f6ee00767 &#60;checkpass+103&#62;:     callq  0xe4f6ee003f0 &#60;__init+160&#62;
0x00000e4f6ee0076c &#60;checkpass+108&#62;:     leaveq
0x00000e4f6ee0076d &#60;checkpass+109&#62;:     retq
End of assembler dump.
</code></pre>

<p>If you aren&#8217;t familiar with x86_64 assembly, here&#8217;s a commentary of what&#8217;s happening in the checkpass() function:</p>

<pre><code>700: push   %rbp
</code></pre>

<p>700: push&#47;save (to the stack) the old stack pointer stored in %rbp 
(base pointer register) onto the stack</p>

<pre><code>701: mov    %rsp,%rbp
</code></pre>

<p>701: copy the contents of the stack pointer register 
(%rsp) into the base pointer register (%rbp)</p>

<pre><code>704: sub    $0x10,%rsp
</code></pre>

<p>704: subtract 0x10 (16 decimal) from the stack pointer</p>

<pre><code>708: lea    0xfffffffffffffff3(%rbp),%rdi   
</code></pre>

<p>708: calculate and move whatever is at %rbp-13 into %rdi (register dest index)</p>

<pre><code>70c: callq  0xe4f6ee005e4 &#60;gets&#62;
</code></pre>

<p>70c: call gets() (which begins at address 0xe4f6ee005e4 - a function inside our program!)</p>

<pre><code>711: lea        0xfffffffffffffff3(%rbp),%rsi
</code></pre>

<p>711: copy %rbp-13 to %rsi (register source index)</p>

<p>By this point, input has been read from stdin and copied to $rax. This can be confirmed if you type (gdb) ni (next instruction) until after 
you are asked for the password, then: (gdb) x&#47;s $rax - examine string in the rax register.  We can also see what the lea instruction is 
actually copying by doing (gdb) x&#47;s $rbp-13 and (gdb) x&#47;s $rsi - it&#8217;s our entered password!</p>

<pre><code>715: lea    2103524(%rip),%rdi      
</code></pre>

<p>715: load whatever is at %rip+2103524 into %rdi. %rip (instruction pointer register)
addresses are relative to the instruction pointer register - i.e. the next instruction,
so are used for global variables. Whatever is at %rip+2103524 is a global var.
0xe4f6ee0071c+0x2018E4 (2103524 in hex) = 0xe4f6f002000 (gdb helpfully tells us the var
name at this address. SPOILER: (gdb) x&#47;s 0xe4f6f002000 or (gdb) x&#47;s $rip+2103524.</p>

<p><em>BIG SPOILER</em> for the impatient:
    (gdb) x&#47;s $rip+2103524
    0xe4f6f002000 <em>REDACTED</em>
    (gdb) set {char[6]}0xe4f6f002000 = &#8220;12345&#8221;
    (gdb) x&#47;s $rip+2103524
    (gdb) c</p>

<pre><code>71c: callq  0xe4f6ee003c0 &#60;__init+112&#62;  
</code></pre>

<p>71c: - this is somewhat specific to the platform compiled on (OpenBSD); in gdb, type:
(gdb) x&#47;i 0xe4f6ee003c0 - x&#47;i is shorthand for &#8216;examine instruction&#8217;. The instruction
called at that address is a jmp to __retguard - the OpenBSD stack protector.</p>

<pre><code>721: mov    %eax,0xfffffffffffffffc(%rbp)   # copy eax into %rbp-4
724: cmpl   $0x0,0xfffffffffffffffc(%rbp)   # if $0x0 = %rbp-4 [set zero flag]:
728: jne    0xe4f6ee0074d           # If not equal, jump to 74d (incorrect password)
</code></pre>

<p>If you didn&#8217;t opt for the <em>SPOILER</em> or <em>BIG SPOILER</em>, we have another opportunity to win this level,
though it is a little sloppy - and is a bit of a &#8216;cheat&#8217;.</p>

<p>We now Know that there is a jne instruction at 0xe4f6ee00728 that decides whether the password we entered is correct or not;
assembly language is assembled into machine language - which, among other things, contains our assembly instructions
as opcodes. Opcodes are specific to each CPU architecture.</p>

<p>If you study Intel architecture manuals, you will find that jne (jnz in intel syntax) is a one-byte op-code. If you don&#8217;t have
a reference handy, use gdb to examine the first byte at address 0xe4f6ee00728:</p>

<pre><code>(gdb) x&#47;1bx 0x00000678b7200728
0x678b7200728 &#60;checkpass+40&#62;:   0x75
</code></pre>

<p>So our opcode for jne&#47;jnz is 0x75.  To save you looking it up, I can tell you that the opcode for the opposing instruction - je&#47;jz - is 0x74.
We are going to change the instruction, not in memory this time, but in the actual executable file (I told you it was sloppy). </p>

<p>To find the physical offset of our instruction, it is necessary to view the Elf headers (assuming you are using an OS which uses the Elf format for executables); for this we can use readelf (part of binutils):</p>

<pre><code>$ readelf -l level1
</code></pre>

<p>We are looking for a LOAD header with the executable (E) flag:</p>

<pre><code>Type  Offset             VirtAddr           PhysAddr           FileSiz            MemSiz              Flags  Align
LOAD  0x0000000000000000 0x0000000000000000 0x0000000000000000 0x00000000000007ae 0x00000000000007ae  R E    100000
</code></pre>

<p>Our offset, virtual address and physical address are all 0x0 - so 0x00000678b7200728 (virtual&#47;memory address) is equal to 0x00000728 (physical address). If the Offset was a different value, or if VirtAddr and PhysAddr differed - you would need to do some hexadecimal arithmetic. </p>

<p>Using xxd, we can view 16 bytes starting at 0x00000678b7200720 which will include our instruction at *728:</p>

<pre><code>$ xxd -s 0x720 -l 16 level1
00000720: ff89 45fc 837d fc00 7523 488d 75f3 488d  ..E..}..u#H.u.H.
</code></pre>

<p>Or, if you prefer hexdump(1):</p>

<pre><code>$ hexdump -C -s 0x720 -n 16 level1
00000720  ff 89 45 fc 83 7d fc 00  75 23 48 8d 75 f3 48 8d  |..E..}..u#H.u.H.|
</code></pre>

<p>There are two 0x75 bytes listed, so count along from 0x720 to 0x728 to confirm which is the opcode we are looking for.</p>

<p>We could do something fancy in a ksh script and xxd, but I think you&#8217;ve been through enough for level1 - so we will edit the file using Vim:</p>

<pre><code>$ vim -b level1
:set syntax=xxd
:%!xxd
</code></pre>

<p>Move down to 00000720, find our lucky number 75 and change it to 74.  Next use xxd&#8217;s reverse (-r) option and save the file:</p>

<pre><code>:%!xxd -r
:wq
</code></pre>

<p>Confirm that the changes were made:</p>

<pre><code>$ xxd -s 0x720 -l 16 level1
00000720: ff89 45fc 837d fc00 7423 488d 75f3 488d  ..E..}..u#H.t.H.
</code></pre>

<p>Brilliant! Now to test:</p>

<pre><code>$ .&#47;level1

Welcome to Cryogenix
Password: yourmum

yourmum is correct!

Secret stuff
</code></pre>

<p>We&#8217;re covered quite a lot in this short tutorial, particularly if you weren&#8217;t familiar with the tools we used.  I suggest you read the man pages for them all so you can familiarise yourself fully with them before trying the yet-to-be-released level2!</p>

<p>level1 was written in a way that it could be solved through a number of methods - this tutorial covered a couple of them.  There are intentional vulnerabilities in the code which could be exploited and will be covered in a separate line of tutorials, but the <em>biggest spoiler</em> of them all is that you could have solved this level simply by viewing the strings in our executable file:</p>

<pre><code>$ strings level1 | tail -n 5
</code></pre>

<p>Oops!</p>

<p>I hope you enjoyed this lesson, and appreciate any feedback or ideas for subsequent levels and tutorials. Apologies for any technical errors, AT&#38;T syntax is not my native language.</p>

]]></description>
</item>

<item>
<guid>/articles/openbsd_ncsa_mosaic.html</guid>
<link>/articles/openbsd_ncsa_mosaic.html</link>
<pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="NCSA%20Mosaic%202.7%20on%20OpenBSD">NCSA Mosaic 2.7 on OpenBSD</h4>

<p>A classic web browser, now available on OpenBSD</p>

<p>Added OpenBSD support and upgraded the archaic libpng code so you too can enjoy this historic web browser. NCSA&#8217;s site causes a coredump, so run the binary with another URL as an argument. It&#8217;s not great as a browser on the modern web, but it does make a great gopher client!</p>

<p>Now using Cameron Kaiser&#8217;s patches and alternative (&#8216;modern&#8217;) renderer.  This needs a serious code audit before even considering submitting to ports.</p>

<pre><code>$ git clone https:&#47;&#47;github.com&#47;0x16h&#47;mosaic-CK-openbsd
$ doas pkg_add motif
$ cd mosaic-CK-openbsd &#38;&#38; make openbsd
$ src&#47;Mosaic gopher:&#47;&#47;gopher.club
</code></pre>

<p><a href="/fvwm.png"><img src="/fvwm.png" alt="Mosaic Screenshot" /></a>
<img src="/mosaic-ck.png" alt="Mosaic Screenshot" />
<img src="/mosaic-ck-2.png" alt="Mosaic Screenshot 2" /></p>

]]></description>
</item>

<item>
<guid>/articles/openbsd_nameserver.html</guid>
<link>/articles/openbsd_nameserver.html</link>
<pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="OpenBSD%20as%20an%20authoritative%20DNS%20nameserver">OpenBSD as an authoritative DNS nameserver</h4>

<p>Configuring NSD on OpenBSD as an authoritative DNS nameserver</p>

<p>OpenBSD ships with the <a href="https://nlnetlabs.nl/projects/nsd/about/">NLnet Labs Name Server Daemon</a> - <a href="http://man.openbsd.org/nsd">nsd(8)</a>, a fast and secure (DNSSEC-enabled) implementation of an authoritative DNS nameserver.</p>

<p>First we should generate a <a href="https://en.wikipedia.org/wiki/TSIG">TSIG</a> (Transaction SIGnature) key. If using hmac-md5:</p>

<pre><code>dd if=&#47;dev&#47;urandom of=&#47;dev&#47;stdout count=1 bs=32 | openssl base64
</code></pre>

<p>Or for sha256 (preferred):</p>

<pre><code>dd if=&#47;dev&#47;urandom of=&#47;dev&#47;stdout count=1 bs=64 | openssl base64
</code></pre>

<p>Keep the resulting base64-encoded key for later.  For demonstration purposes I will be using the following sha256 key:</p>

<pre><code>0i96GKeAPxwGZ2ALxrvM882oL107NuCnXLjv4PRpzCS31oySYILYzbs02Aes0OqCgy5+rA96YGep2xFWmzsKHg==
</code></pre>

<p>Open <strong>&#47;var&#47;nsd&#47;etc&#47;nsd.conf</strong> and create a simple configuration for our example domain:</p>

<pre><code>server:
        hide-version: yes
        verbosity: 1
        database: "" # disable database

remote-control:
        control-enable: yes
        control-interface: &#47;var&#47;run&#47;nsd.sock
        server-key-file: "&#47;var&#47;nsd&#47;etc&#47;nsd_server.key"
        server-cert-file: "&#47;var&#47;nsd&#47;etc&#47;nsd_server.pem"
        control-key-file: &#47;var&#47;nsd&#47;etc&#47;nsd_control.key"
        control-cert-file: "&#47;var&#47;nsd&#47;etc&#47;nsd_control.pem"

key:
   name: "sec_key"
   algorithm: hmac-sha256 # or hmac-md5
   secret: "0i96GKeAPxwGZ2ALxrvM882oL107NuCnXLjv4PRpzCS31oySYILYzbs02Aes0OqCgy5+rA96YGep2xFWmzsKHg=="

zone:
        name: "foresthall.org.uk"
        zonefile: "master&#47;foresthall.org.uk"
        notify: 192.0.2.69 sec_key
        provide-xfr: 192.0.2.69 sec_key
</code></pre>

<p>The IP in the last two lines should be that of your slave. If you are configuring the slave, this IP should be that of the master.</p>

<p>The default base location (OpenBSD users rarely deviate from good defaults!) for zonefiles is <strong>&#47;var&#47;nsd&#47;zones</strong> so we create the file <strong>&#47;var&#47;nsd&#47;zones&#47;master&#47;foresthall.org.uk</strong>:</p>

<pre><code>$ORIGIN foresthall.org.uk.    ; default zone domain
$TTL 86400                    ; default time to live

@ IN SOA ns1.cryogenix.net. foresthall.org.uk. (
           2018010203  ; serial number
           28800       ; Refresh
           7200        ; Retry
           864000      ; Expire
           86400       ; Min TTL
           )

        NS      ns1.cryogenix.net.
        NS      ns2.cryogenix.net.
@        MX    10 mail.foresthall.org.uk.
www     IN      A       82.35.249.157
mail    IN      A       82.35.249.157
@       IN      A       82.35.249.157
</code></pre>

<p>See <a href="https://tools.ietf.org/rfc/rfc1034.txt">RFC 1034</a> and <a href="https://tools.ietf.org/rfc/rfc1035.txt">RFC 1035</a> if you are unfamiliar with the zone file format.</p>

<p>Next generate the SSL keys for nsd(8):</p>

<pre><code>$ doas nsd-control-setup
setup in directory &#47;var&#47;nsd&#47;etc
generating nsd_server.key
Generating RSA private key, 3072 bit long modulus
.++
...............++
e is 65537 (0x10001)
generating nsd_control.key
Generating RSA private key, 3072 bit long modulus
.........................++
..++
e is 65537 (0x10001)
create nsd_server.pem (self signed certificate)
create nsd_control.pem (signed client certificate)
Signature ok
subject=&#47;CN=nsd-control
Getting CA Private Key
Setup success. Certificates created. Enable in nsd.conf file to use
</code></pre>

<p>Check your configuration file contains no errors - this is good practice on a live production server before reloading the config:</p>

<pre><code>$ doas nsd-checkconf &#47;var&#47;nsd&#47;etc&#47;nsd.conf
</code></pre>

<p>Run nsd(8) in the foreground to check everything is working:</p>

<pre><code>    $ doas nsd -d -V 5
    [2018-10-31 15:51:02.541] nsd[12021]: notice: nsd starting (NSD 4.1.25)
    [2018-10-31 15:51:02.542] nsd[12021]: info: creating unix socket &#47;var&#47;run&#47;nsd.sock
    [2018-10-31 15:51:02.633] nsd[76579]: info: zone foresthall.org.uk read with success
    [2018-10-31 15:51:02.711] nsd[76579]: notice: nsd started (NSD 4.1.25), pid 12021
</code></pre>

<p>Now use dig(1) to check that it is serving lookup requests for our new domain:</p>

<pre><code>voyager$ dig @ns1.cryogenix.net ANY foresthall.org.uk
;; Truncated, retrying in TCP mode.

; &#60;&#60;&#62;&#62; DiG 9.4.2-P2 &#60;&#60;&#62;&#62; @ns1.cryogenix.net ANY foresthall.org.uk
; (1 server found)
;; global options:  printcmd
;; Got answer:
;; -&#62;&#62;HEADER&#60;&#60;- opcode: QUERY, status: NOERROR, id: 48761
;; flags: qr aa rd; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;foresthall.org.uk.             IN      ANY

;; ANSWER SECTION:
foresthall.org.uk.      86400   IN      SOA     ns1.cryogenix.net. foresthall.org.uk. 2018010203 28800 7200 864000 86400
foresthall.org.uk.      86400   IN      NS      ns1.cryogenix.net.
foresthall.org.uk.      86400   IN      MX      10 mail.foresthall.org.uk.
foresthall.org.uk.      86400   IN      A       82.35.249.157

;; ADDITIONAL SECTION:
mail.foresthall.org.uk. 86400   IN      A       82.35.249.157

;; Query time: 44 msec
;; SERVER: 82.35.249.157#53(82.35.249.157)
;; WHEN: Wed Oct 31 15:52:25 2018
;; MSG SIZE  rcvd: 155
</code></pre>

<p>ctrl-C to kill the nsd foreground process then enable and start it as a daemon:</p>

<pre><code>rcctl enable nsd
rcctl start nsd
</code></pre>

<p>That&#8217;s it! But we haven&#8217;t enabled DNSSEC for our zone&#8230;</p>

<h4 id="Signing%20our%20zone%20with%20DNSSEC">Signing our zone with DNSSEC</h4>

<p>For this we will need ldns-keygen from <a href="https://www.nlnetlabs.nl/projects/ldns/about/">LDNS</a>:</p>

<pre><code>$ doas pkg_add ldns-utils
</code></pre>

<p>Now we generate keys - a zone-signing key (ZSK) and a key-signing key (KSK):</p>

<pre><code>$ cd &#47;var&#47;nsd&#47;zones
$ export ZSK=`&#47;usr&#47;local&#47;bin&#47;ldns-keygen -a RSASHA512 -b 2048 foresthall.org.uk`
$ export KSK=`&#47;usr&#47;local&#47;bin&#47;ldns-keygen -k RSASHA512 -b 4096 foresthall.org.uk`
</code></pre>

<p>DS records were automagically generated, but we will create our own later so delete them:</p>

<pre><code>$ rm *.ds
</code></pre>

<p>Create a signed zone for foresthall.org.uk - this will create master&#47;foresthall.org.uk.signed:</p>

<pre><code>$ ldns-signzone -n -s $(head -n 1000 &#47;dev&#47;urandom | sha256 | cut -b 1-16) master&#47;foresthall.org.uk $ZSK $KSK
</code></pre>

<p>Change foresthall.org.uk&#8217;s zonefile in <strong>&#47;var&#47;nsd&#47;etc&#47;nsd.conf</strong> to the new signed file:</p>

<pre><code>zonefile: foresthall.org.uk.signed
</code></pre>

<p>Reload our nsd configuration</p>

<pre><code>$ nsd-control reconfig
$ nsd-control reload foresthall.org.uk
</code></pre>

<p>Now if we lookup our zone with dig, this time specifying DNSKEY, we should get different results that with the DNSSEC sigs:</p>

<pre><code>dig DNSKEY @ns2.cryogenix.net foresthall.org.uk. +multiline +norec
</code></pre>

<p>Generate DS records for our zone and save the result to your clipboard or somewhere:</p>

<pre><code>$ ldns-key2ds -n -f -2 master&#47;foresthall.org.uk.signed
foresthall.org.uk.      86400   IN      DS      28892 7 2 fa1b31305013e427a8dac5318fbf6ffcdbfda94309ddf12ebdca101a5e07167d
foresthall.org.uk.      86400   IN      DS      28316 10 2 1e38d492215cd05a28b8ea64eaf42c82648064b7c563b7ea27eddd9a7e8d69d3
</code></pre>

<p>These records must be added at TLD level - as we&#8217;re using a .org.uk domain, we are covered by nominet&#8217;s dns*.nic.uk.  Your domain registrar may have a form in their control panel for you to add these DS records, else you may have to contact their customer services. Once the keys have been added, you can check them using dig:</p>

<pre><code>$ dig DS foresthall.org.uk. +trace +short | egrep &#39;^DS&#39;
DS 28316 10 2 1E38D492215CD05A28B8EA64EAF42C82648064B7C563B7EA27EDDD9A 7E8D69D3 from server dns1.nic.uk in 29 ms.
DS 28892 7 2 FA1B31305013E427A8DAC5318FBF6FFCDBFDA94309DDF12EBDCA101A 5E07167D from server dns1.nic.uk in 29 ms.
</code></pre>

<p>The easiest way to verify everything is working is to check the domain on <a href="https://en.internet.nl/">internet.nl</a>.</p>

<p>Unfortunately, this setup requires maintenance - the DNSSEC signatures will expire in four weeks (thanks <a href="https://twitter.com/Habbie">@Habbie</a>!), so some hackery with shell scripts and cron jobs is probably the best solution until something more robust is included in OpenBSD.  One such example is <a href="https://github.com/wekers/Sign-DNSSEC">sign-DNSSEC</a>.</p>

<p>Update: Callum Smith, author of <a href="https://github.com/cullum/dank-selfhosted/">dank-selfhosted</a> has a very clean script which can be run in a cron nightly <a href="https://github.com/cullum/dank-selfhosted/blob/master/roles/nsd/files/resign-zone.sh">here</a></p>

<p>To setup a slave, follow this procedure again - but replace the allow-notify and request-xfr IP with that of the master nameserver.  Once both are up and running, use nsd-control(8) with the force_transfer command to test a zone transfer.</p>

]]></description>
</item>

<item>
<guid>/articles/arduino_433mhz.html</guid>
<link>/articles/arduino_433mhz.html</link>
<pubDate>Thu, 01 Aug 2013 00:00:00 +0100</pubDate>
<title></title>
<description><![CDATA[

<h4 id="433%20Mhz%20vehicle%20unlocking%20with%20Arduino%20Duo">433 Mhz vehicle unlocking with Arduino Duo</h4>

<p>Having only one key fob for the van is anxiety-inducing in case it fails, so I decided to build a replacement with an Arduino&#47;ATMega and a 433Mhz transceiver module.</p>

<p>Resources:</p>

<ul>
<li><a href="https://github.com/ninjablocks/433Utils">433Utils library by ninjablocks</a></li>
<li><a href="https://github.com/sui77/rc-switch">Alternative rc-switch library</a></li>
</ul>

<p>This was originally for a YouTube video which you can watch at <a href="https://www.youtube.com/watch?v=ANQsj8KCzRc">https:&#47;&#47;www.youtube.com&#47;watch?v=ANQsj8KCzRc</a>.</p>

<p><a href="https://www.youtube.com/watch?v=ANQsj8KCzRc"><img src="https://img.youtube.com/vi/ANQsj8KCzRc/0.jpg" alt="Youtube Video" /></a></p>

<p>Code:</p>

<p><strong>sniffer.c</strong></p>

<pre><code>#include

RCSwitch mySwitch = RCSwitch();

void setup() {
    Serial.begin(9600);
    mySwitch.enableReceive(0); &#47;&#47; Receiver on inerrupt 0 =&#62; that is pin #2
}

void loop() {

    if (mySwitch.available()) {
        int value = mySwitch.getReceivedValue();
            if (value == 0) {
                Serial.print("Unknown encoding");
            } else {
                Serial.print("Received ");
                Serial.print( mySwitch.getReceivedValue() );
                Serial.print(" &#47; ");
                Serial.print( mySwitch.getReceivedBitlength() );
                Serial.print("bit ");
                Serial.print("Protocol: ");
                Serial.println( mySwitch.getReceivedProtocol() );
            }
        mySwitch.resetAvailable();

    }
}
</code></pre>

<p><strong>transmitter.c</strong></p>

<pre><code>#include &#60;RCSwitch.h&#62;

#define CODE_one 10692289
#define CODE_two 10692290
#define CODE_three 10692296

const int buttonPin = 4;
const int ledPin =  13;
int buttonPushCounter = 0;
int buttonState = 0;
int lastButtonState = 0;

RCSwitch mySwitch = RCSwitch();

void setup() {
    pinMode(ledPin, OUTPUT);
    pinMode(buttonPin, INPUT);
    pinMode(7, OUTPUT);
    Serial.begin(9600);
    mySwitch.enableTransmit(7);
}

void loop() {
        buttonState = digitalRead(buttonPin);  
        if (buttonState != lastButtonState) {
          if (buttonState == HIGH) {
            buttonPushCounter++;
          }
          lastButtonState = buttonState;
           if (buttonPushCounter % 2 == 0) {
            digitalWrite(ledPin, LOW);
            mySwitch.send(CODE_one, 24);
            buttonPushCounter = 0;
          } else {
            digitalWrite(ledPin, HIGH);
            mySwitch.send(CODE_two, 24);
          }  
        }
     }
</code></pre>

]]></description>
</item>

<item>
<guid>/articles/alphaserver_es40_emu.html</guid>
<link>/articles/alphaserver_es40_emu.html</link>
<pubDate>Mon, 02 Feb 2009 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="AlphaServer%20ES40%20Emulation">AlphaServer ES40 Emulation</h4>

<p>Emulating an AlphaServer ES40 for running Tru64 UNIX or OpenVMS</p>

<p>This article was originally written for CentOS. Building ES40 on OpenBSD requires some extra work; I&#8217;ll port it soon and update this page in the near future. &#8211; 31-OCT-2018</p>

<p>The  <a href="http://www.es40.org/">ES40 Emulator</a>  is a portable  <a href="https://web.archive.org/web/20090606221007/http://www.compaq.com/alphaserver/es40/">AlphaServer ES40</a>  emulator. In many ways it is not unlike the Bochs IA-32 emulator in that it is portable, and provides VGA support through a VGA BIOS and the use of SDL, X11 or Win32 API calls.</p>

<p>As well as emulating a DEC Alpha AXP EV68CB CPU, the ES40 Emulator also recreated the  <a href="http://www.es40.org/Typhoon">Typhoon Chipset</a>, the  <a href="http://www.es40.org/Ali_M1543C">Ali M1543C</a>  and additional  <a href="http://www.es40.org/Devices">devices</a>  that a functioning ES40 system would require.</p>

<p>We are going to build and configure ES40 on a UNIX-like system without X11 or SDL support as we will be treating it as a virtual server and ES40 doesn&#8217;t support running DECWindows yet anyway (but feel free to configure DECWindows with XDM or X11 Forwarding later).</p>

<h3 id="Prerequisites">Prerequisites</h3>

<p>As per  <a href="https://web.archive.org/web/20090606221007/http://www.es40.org/Building_the_Emulator_on_UNIX%2C_BSD%2C_Linux%2C_etc">the instructions</a>  for building ES40, you will need to make sure the following are available:</p>

<ul>
<li>  GNU C&#47;C++, make, unzip etc</li>
<li>  <a href="http://sourceforge.net/project/showfiles.php?group_id=187340&amp;package_id=218669&amp;release_id=581747">es40_018_src.zip</a></li>
<li>  <a href="https://github.com/pocoproject/poco/releases">Poco C++ Libraries (1.3.2+)</a></li>
<li>  OpenSSL&#47;LibreSSL</li>
<li>  libpcap</li>
<li>  OpenVMS 8.3 Alpha or Tru64 Installation kit (and hobbyist license from <a href="https://www.hpe.com/h41268/live/index_e.aspx?qid=24548">HPE</a>)</li>
<li>  <a href="/cl67srmrom.exe">cl67srmrom.exe</a> from <a href="https://web.archive.org/web/20090606221007/http://h18002.www1.hp.com/alphaserver/firmware/readmes/updateviaunix-es40.html">es40.zip</a> (ES40 Firmware)</li>
<li>  <a href="http://nongnu.org/vgabios/">vgabios-0.6a.bin</a>  - VGA BIOS</li>
</ul>

<h3 id="Building">Building</h3>

<p>Make sure libpcap, OpenSSL&#47;LibreSSL and their respective development files are installed on your system.</p>

<p>First we need to install poco; if it is not available from your system package manager, compile from source: </p>

<pre><code>[int16h@cgxsrv01 ~]$ mkdir ES40 &#38;&#38; cd ES40
[int16h@cgxsrv01 ES40]$ wget poco-1.3.3p1.tar.gz
[int16h@cgxsrv01 ES40]$ tar zxvf poco-1.3.3p1.tar.gz
[int16h@cgxsrv01 ES40]$ cd poco-1.3.3p1
[int16h@cgxsrv01 ES40]$ .&#47;configure --omit=Data&#47;ODBC,Data&#47;MySQL
[int16h@cgxsrv01 ES40]$ make
[int16h@cgxsrv01 ES40]$ sudo make install
</code></pre>

<p>Create a new directory within ES40 called &#8220;es40-source&#8221; (or whatever you like) and place es40_018_src.zip into this directory. Unzip the archive, then we will edit the Makefile to remove any debugging flags and GUI options (as we are going for a headless &#8216;production&#8217; server).</p>

<pre><code>[int16h@cgxsrv01 ES40]$ mkdir es40-source
[int16h@cgxsrv01 ES40]$ unzip es40_018_src.zip -d es40-source&#47; &#38;&#38; cd es40-source
[int16h@cgxsrv01 es40-source]$ vi Makefile
</code></pre>

<p>Navigate down to the <strong>CTUNINGFLAGS</strong> section and replace &#8216;generic&#8217; with your target CPU (this is optional)</p>

<pre><code># CTUNINGFLAGS - tuning options for the compiler
#       
# Samples for g++ on x86:
#  -O3   -- optimize at level 3
#  -mtune=   -- cpu is one of:  generic, core2, athlon64, pentium4, etc
# 
CTUNINGFLAGS = -O3 -mtune=generic
</code></pre>

<p>By default, ES40 will compile with &#8220;<strong>-g -DHIDE_COUNTER -DDEBUG_BACKTRACE</strong>&#8221; there are many other options which are listed below, but to help improve performance I will remove all debug flags. You may include any you like, but this is being set up as if it was a production-testing server.</p>

<pre><code># CDEBUGFLAGS - turn on debugging in ES40
#
# Supported flags:
#   -g                          Include information for gdb
#   -DHIDE_COUNTER          Do not show the cycle counter
#   -DDEBUG_VGA             Turn on VGA Debugging
#   -DDEBUG_SERIAL          Turn on Serial Debugging
#   -DDEBUG_IDE             Turn on all IDE Debugging.
#   -DDEBUG_IDE_   Turn on specific IDE debugging.  Options are:
#                               BUSMASTER, COMMAND, DMA, INTERRUPT, REG_COMMAND,
#                               REG_CONTROL, PACKET
#   -DDEBUG_UNKMEM          Turn on unknown memory access debugging
#   -DDEBUG_PCI             Turn on PCI Debugging
#   -DDEBUG_TB              Turn on Translation Buffer debugging
#   -DDEBUG_PORTACCESS  Turn on i&#47;o port access debugging
#   -DDEBUG_SCSI            Turn on SCSI debugging
#   -DDEBUG_KBD             Turn on keyboard debugging
#   -DDEBUG_PIC             Turn on Programmable Interrupt Controller debugging
#   -DDEBUG_LPT         Turn on debugging for LPT Port
#   -DDEBUG_USB         Turn on debugging for USB controller
#   -DDEBUG_SYM         Turn on debugging for Sym53C810 controller
#   -DDEBUG_DMA         Turn on debugging for DMA controller
#   -DDEBUG_BACKTRACE   Turn on backtrace dump on SIGSEGV
#
CDEBUGFLAGS = -g -DHIDE_COUNTER -DDEBUG_BACKTRACE
</code></pre>

<p>I will comment out the flags at the CDEBUGFLAGS line.</p>

<pre><code>CDEBUGFLAGS = # -g -DHIDE_COUNTER -DDEBUG_BACKTRACE
</code></pre>

<p>Next we will remove support for SDL and X11 as we will use a virtual serial console connection over telnet.</p>

<pre><code># ES40 Options
#
# -DHAVE_SDL            Use the SDL Library for GUI
# -DHAVE_X11            Use X11 for GUI
# -DHAVE_PCAP           Use Networking via PCAP
# -DHAVE_NEW_FP     Use the new floating-point code (with traps,
#                   ut unfortunately, also with bugs)
#
OPTIONS = -DHAVE_SDL -DHAVE_X11 -DHAVE_PCAP
</code></pre>

<p>Make the &#8220;OPTIONS&#8221; section look like the following:</p>

<pre><code>OPTIONS = -DHAVE_PCAP
</code></pre>

<p>Finally save the file and exit. Type &#8216;make&#8217; to begin compilation.</p>

<pre><code>[int16h@cgxsrv01 es40-source]$ make
</code></pre>

<p>ES40 will now compile, don&#8217;t worry about the warnings. Once it&#8217;s complete, we will move the binary and default configuration file to a new directory:</p>

<pre><code>[int16h@cgxsrv01 es40-source]$ mkdir ..&#47;es40
[int16h@cgxsrv01 es40-source]$ cp es40{,.cfg} ..&#47;es40&#47;
[int16h@cgxsrv01 es40-source]$ cd ..&#47;es40
</code></pre>

<p>We need to create 2 directories within here, one will store any disk images and ISOs - the other will contain our ES40 firmware and VGA bios binaries. We will also rename es40.cfg and create a new one from scratch. The default configuration appears to have been written on a Windows system as defined paths use backslashes. It will save you some time to use my config here, but you should read over the original so you are aware of all of the available options.</p>

<pre><code>[int16h@cgxsrv01 es40]$ mkdir img rom
[int16h@cgxsrv01 es40]$ cd rom
[int16h@cgxsrv01 rom]$ wget http:&#47;&#47;mirror.publicns.net&#47;pub&#47;nongnu&#47;vgabios&#47;vgabios-0.6b.bin
[int16h@cgxsrv01 rom]$ ### wget ftp:&#47;&#47;ftp.hp.com&#47;pub&#47;alphaserver&#47;firmware&#47;current_platforms&#47;v7.3_release&#47;ES40_series&#47;ES40&#47;es40.zip
[int16h@cgxsrv01 rom]$ ### unzip es40.zip cl67srmrom.exe
[int16h@cgxsrv01 rom]$ wget https:&#47;&#47;cryogenix.net&#47;cl67srmrom.exe
</code></pre>

<p>We now have the firmware and BIOS images available to us. Although we don&#8217;t need the VGA BIOS, it&#8217;s nice to have it there incase you decide to use it in the future. Now would be a good time to prepare your media. I already had ISO images of OpenVMS and Tru64 ready - you may also create images of your installation media by using &#8216;<strong>dd</strong>&#8217;. Copy your ISO image(s) into the &#8216;<strong>img</strong>&#8217; directory, then we can get started.</p>

<pre><code>[int16h@cgxsrv01 rom]$ cd ..
[int16h@cgxsrv01 img]$ mv &#47;root&#47;OpenVMS.Alpha.8.3.iso img&#47;
[int16h@cgxsrv01 img]$ mv es40.cfg es40.cfg.bak
</code></pre>

<p>Using your favourite line&#47;text editor, re-create <strong>es40.cfg</strong> and we will configure the emulator.</p>

<pre><code>&#47;&#47; We don&#39;t need this, included for reference.
&#47;&#47; gui = sdl&#47;X11&#47;win32
&#47;&#47;
&#47;&#47; gui = X11
&#47;&#47; {
&#47;&#47;   keyboard.use_mapping = false;
&#47;&#47;   keyboard.map = "keys.map";
&#47;&#47; }

sys0 = tsunami
{
    rom.srm = "rom&#47;cl67srmrom.exe";
    rom.decompressed = "rom&#47;decompressed.rom";
    &#47;&#47; rom.flash = "rom&#47;flash.rom";
    &#47;&#47; rom.dpr = "rom&#47;dpr.rom";

&#47;&#47; Memory allocation:
&#47;&#47; 26 = 64 MB
&#47;&#47; 27 = 128MB
&#47;&#47; 28 = 256 MB
&#47;&#47; 29 = 512 MB
&#47;&#47; 30 = 1GB
&#47;&#47; 31 = 2GB

    memory.bits = 28;

 cpu0 = ev68cb
    {
        &#47;&#47; onchip-cache
        icache = false;
    }

&#47;&#47; System Internal PCI Devices: ali, ali_ide, ali_usb
pci0.7 = ali{
    &#47;&#47; These aren&#39;t really required for our set-up.
    mouse.enabled = true;
    lpt.outfile = "lpt.out";
    vga_console = true;
}

pci0.15 = ali_ide
{
    disk0.0 = file
    {
        file =          "img&#47;disk0.img";
        serial_number = "VMS";
        rev_number    = "8.3";
        model_number  = "OpenVMS8.3";
        read_only     = false;
        cdrom         = false;
        autocreate_size = 1000M;
    }

    disk1.0 = file
    {
      file          = "img&#47;OpenVMS.Alpha.8.3.iso";
      read_only     = true;
      cdrom         = true;
    }

}

  pci0.19 = ali_usb {}

  pci0.4 = dec21143 {
    adapter = "eth0" &#47;&#47; Change to your ethernet device
  }

  serial0 = serial {
    port = 21264;
  }
}
</code></pre>

<p>This is a good, simple configuration for your first Emulated ES40 system. You may increase &#8220;<strong>autocreate_size</strong>&#8221; to your liking as well as add, remove or modify any other options (refer to the documentation and the original config file). We are now ready to launch the emulator.</p>

<h3 id="Starting%20the%20Emulator">Starting the Emulator</h3>

<pre><code>[int16h@cgxsrv01 es40]$ sudo .&#47;es40 


   **======================================================================**
   ||                             ES40  emulator                           ||
   ||                              Version 0.18                            ||
   ||                                                                      ||
   ||  Copyright (C) 2007-2008 by the ES40 Emulator Project                ||
   ||  Website: http:&#47;&#47;sourceforge.net&#47;projects&#47;es40                       ||
   ||  E-mail : camiel@camicom.com                                         ||
   ||                                                                      ||
   ||  This program is free software; you can redistribute it and&#47;or       ||
   ||  modify it under the terms of the GNU General Public License         ||
   ||  as published by the Free Software Foundation; either version 2      ||
   ||  of the License, or (at your option) any later version.              ||
   **======================================================================**

sys0(tsunami): $Id: System.cpp,v 1.68 2008&#47;03&#47;04 19:05:21 iamcamiel Exp $
sys0(tsunami): $Id: DPR.cpp,v 1.16 2008&#47;02&#47;29 10:23:09 iamcamiel Exp $
sys0(tsunami): $Id: Flash.cpp,v 1.15 2007&#47;12&#47;30 15:10:22 iamcamiel Exp $
cpu0(ev68cb): $Id: AlphaCPU.cpp,v 1.71 2008&#47;03&#47;04 19:05:21 iamcamiel Exp $
pci0.7(ali): $Id: AliM1543C.cpp,v 1.60 2008&#47;02&#47;27 12:04:19 iamcamiel Exp $
kbc: $Id: Keyboard.cpp,v 1.4 2008&#47;02&#47;29 10:23:09 iamcamiel Exp $
dma: $Id: DMA.cpp,v 1.2 2008&#47;02&#47;26 15:43:47 iamcamiel Exp $
%IDE-I-INIT: New IDE emulator initialized.
pci0.15(ali_ide).disk0.0(file): Could not open file img&#47;disk0.img!
pci0.15(ali_ide).disk0.0(file): writing 2000 1kB blocks:  99%
pci0.15(ali_ide).disk0.0(file): 2000 MB file img&#47;disk0.img created.
pci0.15(ali_ide).disk0.0(file): Mounted file img&#47;disk0.img, 4096000 512-byte blocks, 5120&#47;16&#47;50.
pci0.15(ali_ide).disk1.0(file): Mounted file img&#47;OpenVMS.Alpha.8.3.iso, 270233 2048-byte blocks, 270233&#47;1&#47;1.
pci0.19(ali_usb): $Id: AliM1543C_usb.cpp,v 1.5 2008&#47;02&#47;27 12:04:20 iamcamiel Exp $

%NIC-Q-CHNIC: Choose a network adapter to connect to:
1. eth0
     (No description available)
2. lo
     (No description available)
%NIC-Q-NICNO: Enter the interface number (1-2): 1
pci0.4(dec21143): $Id: DEC21143.cpp,v 1.30 2008&#47;03&#47;02 09:42:52 iamcamiel Exp $
serial0(serial): Waiting for connection on port 21264.
</code></pre>

<p>At this point you will telnet to the IP bound to the interface you chose for the serial console to proceed.</p>

<pre><code>cgxlap:~ int16h$ telnet 10.0.0.11
Escape character is &#39;^]&#39;.
This is serial port #-1489766912 on AlphaSim
</code></pre>

<p>Quickly look at the other terminal where you started ES40 and you will notice that the emulator has now resumed.</p>

<pre><code>serial0(serial): $Id: Serial.cpp,v 1.39 2008&#47;03&#47;02 09:42:52 iamcamiel Exp $
%SYS-I-READROM: Reading original ROM image from rom&#47;cl67srmrom.exe.
%SYS-I-DECOMP: Decompressing ROM image.
0%....10%....20%....30%....40%....50%....60%....70%....80%....90%......100%
%SYS-I-ROMWRT: Writing decompressed rom to rom&#47;decompressed.rom.
%SYM-I-PATCHROM: Patching ROM for speed.
%SYS-I-ROMLOADED: ROM Image loaded successfully!
flash: 2097156 bytes restored.
%FLS-I-RESTST: Flash state restored from flash.rom
dpr: 16384 bytes restored.
%DPR-I-RESTST: DPR state restored from dpr.rom
6232 | 000000000008bb9c
</code></pre>

<p>Our ROM image has been decompressed and patched, and the emulator has started properly. Now go back to your telnet serial console and wait for the system to initialise. Depending on your system, this may take a couple of minutes. It should be noted that this emulator is emulating an 847Mhz 64-Bit Alpha CPU as well as all the associated hardware&#8230; as you can imagine, accomplishing this on a 32-bit Intel system will put a lot of strain on the system and the emulated system itself will run slowly unless you have a high-spec machine. I&#8217;m running this on an old AMD Sempron 2800+ system with less than 1GB of RAM, I recommend  <strong>at least</strong>  an Intel Core2 Duo system.</p>

<p>After your (hopefully short) wait, you will see the following initialisation messages:</p>

<pre><code>starting console on CPU 0
initialized idle PCB
initializing semaphores
initializing heap
initial heap 240c0
memory low limit = 1b0000 heap = 240c0, 17fc0
initializing driver structures
initializing idle process PID
initializing file system
initializing hardware
initializing timer data structures
lowering IPL
CPU 0 speed is 847 MHz
create dead_eater
create poll
create timer
create powerup
access NVRAM
Memory size 256 MB
testing memory
..
probe I&#47;O subsystem
probing hose 1, PCI
probing hose 0, PCI
probing PCI-to-ISA bridge, bus 1
bus 0, slot 4 -- ewa -- DE500-BA Network Controller
bus 0, slot 15 -- dqa -- Acer Labs M1543C IDE
bus 0, slot 15 -- dqb -- Acer Labs M1543C IDE
starting drivers
entering idle loop
*** system serial number not set. use set sys_serial_num command.
Partition 0, Memory base: 000000000, size: 010000000
initializing GCT&#47;FRU at 1c8000
Initializing ewa dqa dqb 
Memory Testing and Configuration Status
  Array       Size       Base Address    Intlv Mode
---------  ----------  ----------------  ----------
    0        256Mb     0000000000000000    4-Way

     256 MB of System Memory
Testing the System
Testing the Network
AlphaServer ES40 Console V7.3-1, built on Feb 27 2007 at 12:57:47
P00&#62;&#62;&#62;
</code></pre>

<p>Huzzah! The virtual AlphaServer is now online and ready for you to boot your installation media. Let&#8217;s have a look at available devices and boot from the ISO.</p>

<pre><code>P00&#62;&#62;&#62;sh dev
dqa0.0.0.15.0              DQA0                    OpenVMS8 .3
dqb0.0.1.15.0              DQB0         OpenVMS. Alpha.8.3.iso
dva0.0.0.1000.0            DVA0                               
ewa0.0.0.4.0               EWA0              08-00-2B-E5-40-00

P00&#62;&#62;&#62;boot DQB0
(boot dqb0.0.1.15.0 -flags 0)
block 0 of dqb0.0.1.15.0 is a valid boot block
reading 1226 blocks from dqb0.0.1.15.0
bootstrap code read in
base = 200000, image_start = 0, image_bytes = 99400(627712)
initializing HWRPB at 2000
initializing page table at ff56000
initializing machine state
setting affinity to the primary CPU
jumping to bootstrap code


    OpenVMS (TM) Alpha Operating System, Version V8.3    
    ? Copyright 1976-2006 Hewlett-Packard Development Company, L.P.

        Installing required known files...

    Configuring devices...
%EWA0, Auto-negotiation mode set by console
%EWA0, Link state: UP
%EWA0, Auto-negotiation (internal) starting
%EWA0, Full Duplex 100baseTX connection selected

    ****************************************************************

    You can install or upgrade the OpenVMS ALPHA operating system
    or you can install or upgrade layered products that are included
    on the OpenVMS ALPHA distribution media (CD&#47;DVD).

    You can also execute DCL commands and procedures to perform
    "standalone" tasks, such as backing up the system disk.

    Please choose one of the following:

        1)  Upgrade, install or reconfigure OpenVMS ALPHA Version V8.3
        2)  Display layered products that this procedure can install
        3)  Install or upgrade layered products
        4)  Show installed products
        5)  Reconfigure installed products
        6)  Remove installed products
        7)  Find, Install or Undo patches; Show or Delete Recovery Data
        8)  Execute DCL commands and procedures
        9)  Shut down this system

Enter CHOICE or ? for help: (1&#47;2&#47;3&#47;4&#47;5&#47;6&#47;7&#47;8&#47;9&#47;?)
</code></pre>

<p>From here you can continue to install OpenVMS as normal. So far I have been able to install and run OpenVMS 8.3 Alpha and Tru64 UNIX. This is an excellent emulator, and although it isn&#8217;t &#8220;finished&#8221; - I think it runs pretty well. It should be noted however that the network interface is a little buggy - In Tru64 I can configure it and ping the local IP, but I&#8217;m unable to send or receive traffic outside of there currently.</p>

]]></description>
</item>

<item>
<guid>/articles/openvms_simh_2.html</guid>
<link>/articles/openvms_simh_2.html</link>
<pubDate>Mon, 12 Jan 2009 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="OpenVMS%20and%20SIMH%20-%20Part%202">OpenVMS and SIMH - Part 2</h4>

<p>Running OpenVMS on the SIMH VAX simulator</p>

<p>Welcome to the second part of  <a href="/OpenVMS_and_SIMH_pt1.html">Getting Started with OpenVMS and SIMH</a>. This article assumes that you have already followed  <a href="/OpenVMS_and_SIMH_pt1.html">part 1</a>  or have at least installed  <strong>OpenVMS VAX 7.3</strong>  on a system, with  <strong>dua0</strong> containing the OS,  <strong>dua1</strong>  containing user-directories, and TCP&#47;IP services are functional. If in doubt, have a quick read over what we did in the first part. For this part, we will install and use  <strong>UNZIP</strong>,  <strong>wget</strong>,  <strong>Compaq C</strong> and the  <strong>WASD</strong>  HTTP server.  </p>

<p>Although I&#8217;d &#47;love&#47; to throw you in at the deep-end, I think the transition to OpenVMS will be easier if we introduce a couple of utilities you may be familiar with and break you in gently. This is a bit of a &#8216;ghetto&#8217; guide to OpenVMS 7.3, and is primarily for users learning through SIMH - so, we will use the easiest methods of retrieving and installing what we need (despite them not being the most traditional methods).  </p>

<p><strong>UNZIP &#38; WGET</strong>  </p>

<p>These two utilities, in my opinion, are extremely useful when getting started with OpenVMS 7.3 in SIMH. The main reason being that you will find many 3rd-party applications will be ZIP archived, and nowadays - HTTP is much more common for files than FTP. WGET, although slightly bloated, is one of the most popular utilities in the UNIX(-like) world for grabbing files over HTTP and FTP. Although you should be ashamed for bringing it and similar utilities into your nice, clean, OpenVMS installation - it will aid you in the transition from UNIX to OpenVMS by providing some niceties you have become accustomed to having. So, let&#8217;s grab &#8216;wget&#8217; first. Login to your OpenVMS system as a normal user, and type &#8216;<strong>sh def</strong>&#8217;. This is short for &#8216;<strong>SHOW DEFAULT</strong>&#8217; and is like the &#8216;<strong>pwd</strong>&#8217; command on UNIX&#47;Unix-like systems. It will display the current directory you are in. If you followed the first tutorial on installing OpenVMS in SIMH, you should see something like the following:  </p>

<pre><code>$ sh def
  DUA1:[INT16H]
</code></pre>

<p>This means that you are in a directory named &#8220;<strong>INT16H</strong>&#8221; at the root of the <strong>DUA1:</strong> drive. We will discover more about how directories are addressed in a moment.  </p>

<p>We should create a directory for our downloaded files to live in. Looking at the above &#8216;<strong>path</strong>&#8217;, how would you expect a full path to &#8216;<strong>DOWNLOADS</strong>&#8217; within the &#8216;<strong>INT16H</strong>&#8217; directory to look? On a Unix-like system, you would probably expect something like &#8216;<strong>&#47;home&#47;int16h&#47;downloads</strong>&#8217; - but this is not UNIX.  </p>

<p>For clarity, we will create a directory using its full path using the &#8216;<strong>create</strong>&#8217; command like when we created the user-directory:</p>

<pre><code>$ create&#47;dir dua1:[INT16H.DOWNLOADS]
</code></pre>

<p>As you can see, we first reference the device, then the path from there is [enclosed], with each directory separated by a period&#47;dot&#47;full-stop. This is probably more similar to AmigaDOS than any other modern operating systems you may have came across.  </p>

<p>You will receive no confirmation of the command&#8217;s success, but if it did not succeed - you will receive an error message. To see that your new directory does actually exist, run &#8216;<strong>dir</strong>&#8217; (<strong>DIRECTORY</strong>), which will provide you with a directory-listing, similar to that below.</p>

<pre><code>$ dir

Directory DUA1:[INT16H]

DOWNLOADS.DIR;1

Total of 1 file.    
</code></pre>

<p>We can now move into this directory by issuing the &#8220;<strong>set def</strong>&#8221; (<strong>SET DEFAULT</strong>) command. You could pass &#8216;<strong>dua1:[INT16H.DOWNLOADS]</strong>&#8217; as the path to change to, but as we are in the directory where our target directory exists - that wouldn&#8217;t be the quickest path. Instead, run &#8216;<strong>set def [.DOWNLOADS]</strong>&#8217; - the &#8216;.&#8217; before &#8216;<strong>DOWNLOADS</strong>&#8217; tells the system that we want to change to a directory named &#8216;<strong>DOWNLOADS</strong>&#8217; within the current directory. Although it may be tempting to issue &#8216;<strong>set def DOWNLOADS</strong>&#8217; or &#8216;<strong>set def [DOWNLOADS]</strong>&#8217; but this wouldn&#8217;t work how you may expect:</p>

<pre><code>$ set def [.DOWNLOADS]
$ sh def
  DUA1:[INT16H.DOWNLOADS]

$ set def dua1:[INT16H.DOWNLOADS]
$ sh def
  DUA1:[INT16H.DOWNLOADS]
</code></pre>

<p>As you can see from either command above, we are now in the correct directory. If you were to change to &#8216;[DOWNLOADS]&#8217; instead of [.DOWNLOADS] we would receive:</p>

<pre><code>$ set def [DOWNLOADS]
$ sh def
  DUA1:[DOWNLOADS]
%DCL-I-INVDEF, DUA1:[DOWNLOADS] does not exist
</code></pre>

<p>This is because &#8216;<strong>[DOWNLOADS]</strong>&#8217; would take us to &#8216;<strong>DUA1:[DOWNLOADS]</strong>&#8217; which doesn&#8217;t currently exist.  </p>

<p>It would be quite useful if we knew how to go back a directory. In many operating systems, &#8216;<strong>cd ..</strong>&#8217; would allow you to do this, but as you know - we use &#8216;<strong>set def</strong> (&#8216;<strong>SET DEFAULT</strong>&#8217;), and rather than &#8216;<strong>..</strong>&#8217; we use &#8216;<strong>[-]</strong>&#8217;. So, we will move back into your &#8216;home&#8217; directory now:</p>

<pre><code>$ set def [-]
$ sh def
  DUA1:[INT16H]
</code></pre>

<p>Now that you know how to create directories and navigate around the data disk, we will create one more directory, naming it &#8220;BIN&#8221; - so store programs you want for your own use.</p>

<pre><code>$ create&#47;dir [.BIN]
</code></pre>

<p>Change directory to [.BIN] and we shall download the UNZIP utility.</p>

<pre><code>$ set def [.BIN]
</code></pre>

<p>Available for OpenVMS is a wide range of freeware utilities and applications, usually made available from the <del><a href="https://web.archive.org/web/20090312034329/http://www.openvms.compaq.com/openvms/freeware/">OpenVMS Freeware CDs</a></del>. These are available as large zip files from Compaq (HP) or alternatively, you can browse and download programs from the Freeware CDs as well as many others via <del><a href="https://web.archive.org/web/20090312034329/http://www.saic.com/">SAIC.com&#8217;s</a>  <a href="https://web.archive.org/web/20090312034329/http://mvb.saic.com/">OpenVMS Freeware Archive</a>.</del> The problem is, many of them are zipped - and we do not have the means to unzip these archives.  </p>

<p>Luckily, many FTP sites contain useful tools such as UNZIP in a compiled executable for Alpha, ia64 and VAX; suitable for running straight away. Such sites include <a href="https://web.archive.org/web/20090312034329/http://www.process.com/">Process.com</a> and the <del><a href="https://web.archive.org/web/20090312034329/http://mvb.saic.com/">SAIC OpenVMS Freeware Archive</a></del> mentioned above. We will be using SAIC&#8217;s archive so that you can get used to the structure of the Freeware CDs.  </p>

<p>Use the &#8216;FTP&#8217; client supplied with OpenVMS to connect to <del><strong>mvb.saic.com</strong></del> (no longer available) and login Anonymously</p>

<pre><code>$ ftp mvb.saic.com
220 mvb.saic.com MultiNet FTP Server Process V5.2(16) at Tue 13-Jan-2009 6:38AM-PST
Connected to mvb.saic.com. 
Name (mvb.saic.com:int16h): Anonymous
331 Anonymous user ok. Send real ident as password.
Password: 
230-
230-    Greetings, and welcome to the DECUS tape archives here at Mvb.Saic.Com. 
230-    This archive contains submissions of the VMS and L&#38;T; SIGs of the U.S.
230-    DECUS chapter.  The entire SIG tape collection of the VMS (nee VAX) SIG
230-    and the Languages and Tools SIG are available here.  There are also a
230-    few extras here such as the Info-VAX archive, Freeware V4.0 &#38; V5.0 disks,
230-    x11r6, Tex, ISO9660, etc.  There is also a mirror of the VMS freeware
230-    archive at Process Software (in the [.PROCESS] directory) and a mirror
230-    of the DECWindows archive at CENA (in the [.DECWINDOWS] directory).
230-
230-    FTP access to this system is available 24 hours a day, 7 days a week.
230-
230-    N.B. This is a VMS system.  However, the FTP server is set to use Unix
230-    syntax in order to accomodate all of the "the world is unix" ftp
230-    clients out there.  To return to VMS syntax, issue the command: cd []
230-
230-Guest User INT16H logged into &#47;disk$misc&#47;decus at Tue 13-Jan-2009 6:38AM-PST, job 36903.
230 Directory and access restrictions apply
FTP&#62; 
</code></pre>

<p>You will see that we logged in as user <strong>Anonymous</strong> and we gave our ident (username) as the password. As you connect to more FTP servers running OpenVMS, you will notice that the &#8216;Anonymous&#8217; login will always require your ident - rather than an e-mail address like many other servers nowadays.  </p>

<p>The utilities we will be downloading are located in <strong>[.FREEWAREV80.000tools.vax_images]</strong>. Although the server has been set to use UNIX syntax by default (as we were informed by the MOTD), we can still navigate through the server like a normal OpenVMS system. Let&#8217;s go to the directory we require now.</p>

<pre><code>FTP&#62; sh def
257 "DISK$MISC:[DECUS]" is current directory.
FTP&#62; set def [.FREEWAREV80.000tools.vax_images]
250 Connected to DISK$MISC:[DECUS.FREEWAREV80.000TOOLS.VAX_IMAGES].
</code></pre>

<p>Let&#8217;s have a look at which tools are available before we go downloading:</p>

<pre><code>FTP&#62; dir
200 Port 192.8 at Host 79.64.146.144 accepted.
150 List started.

DISK$MISC:[DECUS.FREEWAREV80.000TOOLS.VAX_IMAGES]

BZIP2.EXE;1               156   9-APR-2001 02:11 [BERRYMAN] (RE,RE,RE,RE)
DECODE_64.EXE;1            11   6-MAY-1997 11:33 [BERRYMAN] (RE,RE,RE,RE)
GZIP.EXE;1                 93  23-FEB-2001 10:36 [BERRYMAN] (RE,RE,RE,RE)
UNZIP.EXE;1               208  20-JUL-2006 17:34 [BERRYMAN] (RE,RE,RE,RE)
VMSTAR.EXE;1               59  27-SEP-2003 03:37 [BERRYMAN] (RE,RE,RE,RE)
ZIP.EXE;1                 137  20-JUL-2006 17:35 [BERRYMAN] (RE,RE,RE,RE)


Total of 664 blocks in 6 files.

226 Transfer completed.
542 bytes received in 00:00:00.03 seconds (17.64 Kbytes&#47;s)
</code></pre>

<p>You may download any utilities you will require, but for now we will just grab ZIP.EXE and UNZIP.EXE. Remember to switch to binary mode for transfers though, else you won&#8217;t be able to execute the files:</p>

<pre><code>FTP&#62; binary
200 Type I ok.
FTP&#62; get ZIP.EXE
200 Port 192.9 at Host 79.xxx.xxx.xxx accepted.
150 IMAGE retrieve of DISK$MISC:[DECUS.FREEWAREV80.000TOOLS.VAX_IMAGES]ZIP.EXE;1 (70144 bytes) started.
226 Transfer completed.  70144 (8) bytes transferred.
local: DUA1:[INT16H.BIN]ZIP.EXE;1  remote: ZIP.EXE
70144 bytes received in 00:00:01.34 seconds (51.11 Kbytes&#47;s)
FTP&#62; get UNZIP.EXE
200 Port 192.10 at Host 79.xxx.xxx.xxx accepted.
150 IMAGE retrieve of DISK$MISC:[DECUS.FREEWAREV80.000TOOLS.VAX_IMAGES]UNZIP.EXE;1 (106496 bytes) started.
226 Transfer completed.  106496 (8) bytes transferred.
local: DUA1:[INT16H.BIN]UNZIP.EXE;1  remote: UNZIP.EXE
106496 bytes received in 00:00:01.56 seconds (66.66 Kbytes&#47;s)
FTP&#62; 
</code></pre>

<p>If you have any problems retrieving directory listings, downloading files etc - you can adjust the PASV&#47;PASSIVE FTP settings with the &#8216;<strong>passive</strong>&#8217; command. Type &#8220;<strong>exit</strong>&#8221; to disconnect and terminate FTP. Using the &#8216;<strong>r</strong>&#8217; (&#8216;<strong>RUN</strong>&#8217;) command, we can check that the binaries&#47;images will run successfully:</p>

<pre><code>$ r unzip.exe
UnZip 5.52 of 28 February 2005, by Info-ZIP.  For more details see: unzip -v.
~
</code></pre>

<p>Perfect! Or is it? Let&#8217;s try to run unzip.exe again, but this time we&#8217;ll append &#8216;-v&#8217; to it.</p>

<pre><code>$ r unzip.exe -v
%DCL-W-MAXPARM, too many parameters - reenter command with fewer parameters
</code></pre>

<p>That&#8217;s not very useful, not for running a command which requires parameters anyway. OpenVMS has an extremely useful online help system (online as in live, within the OS). Let&#8217;s have a brief look at that now and hope we can discover why we can&#8217;t use &#8216;<strong>RUN</strong>&#8217; how we would like:</p>

<pre><code>$ help run

RUN

     Executes an image within the context of your process (see Image).
     If you are invoking an image requiring one or more parameters,
     you must use the Automatic Foreign Command format or the Foreign
     Command format.

     Creates a subprocess or a detached process to run an image and
     deletes the process when the image completes execution (see
     Process).

  Additional information available:

  Image      Process

RUN Subtopic? 
</code></pre>

<p>We have established that &#8216;<strong>run</strong>&#8217; won&#8217;t let us use programs which require argc&#47;argv-style parameters, and now the help system has informed us that we must use the <strong>Automatic Foreign Command</strong> format or the <strong>Foreign Command</strong> format. Foreign Commands are usually programs which aren&#8217;t native to OpenVMS and as such don&#8217;t comply with how OpenVMS expects applications to be run - or can be any programs&#47;commands outside of DCL. For example the &#8216;<strong>RUN</strong>&#8217; command, if issued without a filename as a parameter, will prompt you to enter a filename. This is not the case with the vast majority of programs which have been ported from UNIX and other systems. To exit from the help system, press <strong>CTRL-Z</strong>.  </p>

<p>To be able to run these commands, we will define a <strong>symbol</strong>. A symbol is a symbolic name or alias for a string, the result isn&#8217;t unlike setting environment variables in other operating systems. <strong>==</strong> is used for global symbols, and prepended a colon (&#8216;:&#8217;) is used for strings. Here are a couple of examples of setting symbols:</p>

<pre><code>$ A == 1
$ B :== bee
</code></pre>

<p>The online help system can tell us the format used for setting symbols:</p>

<pre><code>     symbol-name =[=] expression

   symbol-name[bit-position,size] =[=] replacement-expression
</code></pre>

<p>Using the &#8216;<strong>SHOW</strong>&#8217; command, you can display the value of any single symbol or all of them at once:</p>

<pre><code>$ show symbol A
  A = 1   Hex = 00000001  Octal = 00000000001

$ show symbol&#47;all
  A = 1   Hex = 00000001  Octal = 00000000001
  B = "BEE"
</code></pre>

<p>These can be used like variables, aliases for commands etc. If we wanted to create a symbol called &#8216;<strong>ls</strong>&#8217; which had the string value &#8220;<strong>DIR</strong>&#8221; associated with it, we could use &#8216;<strong>ls</strong>&#8217; in place of &#8216;<strong>DIR</strong>&#8217;:</p>

<pre><code>$ ls :== DIR
$ sh symbol ls
  LS = "DIR"
$ ls

Directory DUA1:[INT16H.BIN]

UNZIP.EXE;1         ZIP.EXE;1           

Total of 2 files.
</code></pre>

<p>This is all very useful, but it doesn&#8217;t quite let us run our Foreign Commands yet. Try creating a symbol which will point to &#8216;<strong>DUA1:[INT16H.BIN]UNZIP.EXE</strong>&#8217;, then issue your new symbol as a command:</p>

<pre><code>$ unzip :== DUA1:[INT16H.BIN]UNZIP.EXE
$ unzip
%DCL-W-IVVERB, unrecognized command verb - check validity and spelling \DUA1\
</code></pre>

<p>We need to flag the symbol as being associated with a foreign command, so it will treat it as such. This is done by adding &#8216;$&#8217; at the beginning of the &#8216;path&#8217;:</p>

<pre><code>$ unzip :== $DUA1:[INT16H.BIN]UNZIP.EXE
$ sh symbol unzip
  UNZIP == "$DUA1:[INT16H.BIN]UNZIP.EXE"
</code></pre>

<p>Now let&#8217;s try running &#8216;unzip&#8217; again, and then try issuing the &#8216;-v&#8217; parameter.</p>

<pre><code>$ unzip
UnZip 5.52 of 28 February 2005, by Info-ZIP.  For more details see: unzip -v.
~

$ unzip -v
UnZip 5.52 of 28 February 2005, by Info-ZIP.  Maintained by C. Spieler.  Send
bug reports using http:&#47;&#47;www.info-zip.org&#47;zip-bug.html; see README for details.

Latest sources and executables are at ftp:&#47;&#47;ftp.info-zip.org&#47;pub&#47;infozip&#47; ;
see ftp:&#47;&#47;ftp.info-zip.org&#47;pub&#47;infozip&#47;UnZip.html for other sites.

Compiled with VAX C for VMS (V5.4-2 VAX) on Feb 28 2005.
</code></pre>

<p>Congratulations, you can now unzip files. Usually you would put system utilities somewhere such as </p>

<pre><code>SYS$SYSTEM
</code></pre>

<p>this is a logical name which points to &#8216;<strong>SYS$SYSROOT:[SYSEXE]</strong>&#8217; which has another logical name ;). If you would like to see a list of defined logical names, you may run &#8216;<strong>show logical&#47;all</strong>&#8217;.  </p>

<p>Because it&#8217;s not ideal to create symbols for every Foreign Command program you wish to use, OpenVMS now has something comparable to the $PATH environment variable - &#8216;<strong>dcl$path</strong>&#8217;. This is defined with the &#8216;<strong>define</strong>&#8217; command, and will allow you to set one or more directories to be in your &#8220;path&#8221; for running Foreign Commands. To enable us to run any executables from our [.BIN] directory, we shall add it to &#8216;<strong>dcl$path</strong>&#8217; now:</p>

<pre><code>$ define dcl$path dua1:[INT16H.BIN]
</code></pre>

<p>You can check that it is working by running &#8220;zip&#8221; from the command-line.  </p>

<p>Finally we have acquired the ZIP and UNZIP utilities, but have also learned some basic but important OpenVMS commands. Next we will download &#8216;wget&#8217;, another utility from the UNIX world, and install it into our personal &#8216;BIN&#8217; directory.  </p>

<p><strong>Wget - the web-getter</strong> Wget for OpenVMS is available from <a href="http://www.antinode.info/dec/index.html">AntiNode.info</a> amongst other places, as are a few other utilities you may find useful. We will be downloading a ZIP file to our DOWNLOADS directory, extracting it, then copying the wget binary to BIN:</p>

<pre><code>$ set def [-.DOWNLOADS]
$ ftp antinode.info

220-   Antinode FTP Server.  Please be nice.
220 alp.antinode.info FTP Server (Version 5.4) Ready.
Connected to alp.antinode.info. 

Name (alp.antinode.info:int16h): Anonymous
331 Guest login OK, send ident as password.
Password: 
230 Guest login OK, access restrictions apply.

FTP&#62; set def [.WGET.wget-1_10_2c_vms]
250-CWD command successful.
250 New default directory is SYS$SYSDEVICE:[ANONYMOUS.WGET.WGET-1_10_2C_VMS]

FTP&#62; binary
200 TYPE set to IMAGE.

FTP&#62; get WGET-1_10_2C_VMS.ZIP
200 PORT command successful.
150 Opening data connection for SYS$SYSDEVICE:[ANONYMOUS.WGET.WGET-1_10_2C_VMS]WGET-1_10_2C_VMS.ZIP;
    (79.xxx.xxx.xxx,49166) (3171539 bytes)
226 Transfer complete.
local: DUA1:[INT16H.DOWNLOADS]WGET-1_10_2C_VMS.ZIP;1  remote: WGET-1_10_2C_VMS.ZIP
3171539 bytes received in 00:00:54.61 seconds (56.71 Kbytes&#47;s)

FTP&#62; exit
221 Goodbye.
</code></pre>

<p>We will now extract &#8216;<strong>WGET-1<em>10</em>2C_VMS.ZIP</strong>&#8217;. Run &#8216;<strong>unzip WGET-1<em>10</em>2C_VMS.ZIP</strong>&#8217;. You will see a lot of files extracting, but we only need one - <strong>WGET.EXE</strong> from <strong>[.wget-1<em>10</em>2c_vms.src.vax]</strong>. We will copy it to our BIN directory:</p>

<pre><code>$ unzip WGET-1_10_2C_VMS.ZIP
inflating: ~~
$ copy [.wget-1_10_2c_vms.src.vax]WGET.EXE DUA1:[INT16H.BIN]WGET.EXE
</code></pre>

<p>Now you can run &#8216;wget&#8217; for times of laziness.</p>

<pre><code>$ wget
dua1:[int16h.bin]wget.exe;1: missing URL
Usage: dua1:[int16h.bin]wget.exe;1 [OPTION]... [URL]...
</code></pre>

<p>Try `dua1:[int16h.bin]wget.exe;1 &#8211;help&#8217; for more options.</p>

<h2 id="Installing%20Supplemental%20Software">Installing Supplemental Software</h2>

<p>A supplemental disc is available for OpenVMS 7.3, this contains developer tools which can be essential if you want a fully-functional learning system. This will give us an opportunity to make use of our recently-installed &#8216;wget&#8217; utility. While still in [.DOWNLOADS], create a new directory called SUPP, change to this dir then use &#8216;wget&#8217; to retrieve your ZIP:</p>

<pre><code>$ create&#47;dir SUPP
$ set def [.SUPP]

$ wget "https:&#47;&#47;mirrors.pdp-11.ru&#47;_vax__&#47;_VMS&#47;_distrib&#47;7.X&#47;Openvms%20Vax%2073%20Supplement.zip"
--22:24:46--  https:&#47;&#47;mirrors.pdp-11.ru&#47;_vax__&#47;_VMS&#47;_distrib&#47;7.X&#47;Openvms%20Vax%2073%20Supplement.zip
           =&#62; `Openvms Vax 73 Supplement.zip&#39;
Resolving ... xxx.xxx.xxx.xxx
Connecting to ...|xxx.xxx.xxx.xxx|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 54,545,839 (52M) [application&#47;zip]
100%[====================================&#62;] 54,545,839   231.87K&#47;s    ETA 00:00

22:28:10 (261.50 KB&#47;s) - `Openvms Vax 73 Supplement.zip&#39; saved [54545839&#47;54545839]
</code></pre>

<p>Unzip the file, and have a look at the contents. Unzipping will probably take some time.</p>

<pre><code>$ unzip OpenVMS-VAX-7_3-Supplement.zip
Archive:  DUA1:[INT16H.SUPP]OPENVMS-VAX-7_3-SUPPLEMENT.ZIP;1
  inflating: aacrt060.a              
~

$ dir

Directory DUA1:[INT16H.SUPP]

AACRT060.A;1        BASIC039.A;1        BASIC039.B;1        BASIC039.C;1       
BASIC039.D;1        BASIC039.E;1        CC064.A;1           CC064.B;1          
DCPSVAX021.A;1      DCPSVAX021.B;1      DCPSVAX021.C;1      DEC-VAXVMS-FORTRAN-V0606-201-1.PCSI;1
DECSET124.A;1       DECSET124.B;1       DECSET124.C;1       DECSET124.D;1      
DECSET124.E;1       DECSET124.F;1       DECSET124.G;1       DECSET124.H;1      
DECSET124.I;1       DECSET124.J;1       DECSET124.K;1       DTC010.A;1         
DTC010.B;1          DTRA072.A;1         DTRA072.B;1         DTRA072.C;1        
FORT066.A;1         OPENVMS-VAX-7_3-SUPPLEMENT.ZIP;1        PASCAL058.A;1      
PASCAL058.B;1       PASCAL058.C;1       PASCAL058.D;1       VMSI18N073.A;1     
VMSI18N073.B;1      VMSI18N073.C;1      

Total of 37 files.
</code></pre>

<p>Ok, so you&#8217;ve waited for this archive to decompress - and now you are presented with 37 files. You will notice that most of the files end in a one-letter extension, the two exceptions being the .ZIP and .PCSI files. Lets delete the ZIP file to save space.</p>

<pre><code>$ delete DEC-VAXVMS-FORTRAN-V0606-201-1.PCSI;1
</code></pre>

<p>You should get used to using full filenames, including the revision appendage(;#) when working with files in OpenVMS. Back to our supplements! When you registered for your hobbyist PAKs, I hope you chose every one which was available as you will need licenses&#47;PAKs for C, PASCAL, FORTRAN and anything else you&#8217;d like to install. Check your e-mail and look for the PAK which begins with: &#8216;<strong>$ LICENSE REGISTER C -</strong>&#8217;. Paste it into your terminal, and load it:</p>

<pre><code>$ $ LICENSE REGISTER C &#47;ISSUER=OPENVMS_HOBBYIST &#47;AUTHORIZATION=DECUS-XXX-#########-#######
 &#47;PRODUCER=DEC &#47;UNITS=0 &#47;TERMINATION_DATE=##-XXX-#### &#47;ACTIVITY=CONSTANT=100
 &#47;CHECKSUM=#-XXXX-XXXX-XXXX-XXXX

$ license load C
%LICENSE-I-UNLOADED, DEC C has been unloaded
%LICENSE-I-LOADED, DEC C was successfully loaded with 0 units
</code></pre>

<p>We now have a license installed and loaded for C. Now we may install it safely, without complaints. When installing &#8216;system&#8217; software, it is often preferred it is done as the &#8216;<strong>SYSTEM</strong>&#8217; user. Issue &#8216;<strong>lo</strong>&#8217; to logout of the system, then re-login as SYSTEM:</p>

<pre><code>$ lo
Connection closed by foreign host.N-2009 00:44:44.56
cgxlap:~ int16h$ 
cgxlap:~ int16h$ telnet 10.0.0.69
Trying 10.0.0.69...
Connected to 10.0.0.69.
Escape character is &#39;^]&#39;.


 Welcome to OpenVMS (TM) VAX Operating System, Version V7.3    

Username: SYSTEM
Password: 
 Welcome to OpenVMS (TM) VAX Operating System, Version V7.3
    Last interactive login on Friday, 26-DEC-2008 19:26

Now we will change into the directory where our supplements are stored, and install Compaq C.

$ set def DUA1:[INT16H.SUPP]
$ @SYS$UPDATE:VMSINSTAL CC064 DUA1:[INT16H.SUPP]
        OpenVMS VAX Software Product Installation Procedure V7.3

It is 14-JAN-2009 at 00:52.

Enter a question mark (?) at any time for help.

* Are you satisfied with the backup of your system disk [YES]? 

The following products will be processed:

  CC V6.4
        Beginning installation of CC V6.4 at 00:52

%VMSINSTAL-I-RESTORE, Restoring product save set A ...

**WARNING!** If you downloaded these sets and you are not using an original CD&#47;ISO, it&#39;s likely they do not have the correct attributes set for VMSINSTAL to acknowledge them. You may receive messages like:

%BACKUP-F-NOTSAVESET, DUA1:[INT16H.SUPP]CC064.A;1 is not a BACKUP save set
%VMSINSTAL-E-NOSAVESET, Save set  A  cannot be restored.

This may sound quite serious, but usually - as mentioned above, it&#39;s due to incorrect file attributes. This can be fixed quite easily:

$ SET FILE&#47;ATT=(LRL:32256,MRS:32256,RFM:FIX) CC064.*;*
$ @SYS$UPDATE:VMSINSTAL CC064 DUA1:[INT16H.SUPP]

Installation should now continue, most of the answers to questions will be quite easy to answer; If in doubt - answer &#39;YES&#39; to any questions regarding installing something.

        Product:      C
        Producer:     DEC
        Version:      6.4
        Release Date: 05-JAN-2001

* Does this product have an authorization key registered and loaded? YES

As we have already installed and loaded our PAK, you should answer &#39;YES&#39; here.

    The file SYS$STARTUP:CCXX$STARTUP.COM contains commands to be
    executed at system startup to allow for the best compilation
    performance.  You may want to invoke this command file from your
    system&#39;s site specific start up file.  This command file does not
    have to be invoked for correct operation of Compaq C.
</code></pre>

<p>Again, these kind of installation notes can be very useful. In this case it&#8217;s not crucial to perform this task for the product to function, but sometimes there will be additional steps you must take.  </p>

<h2 id="Installing%20WASD%20VMS%20Hypertext%20Services">Installing WASD VMS Hypertext Services</h2>

<p><a href="http://wasd.vsm.com.au/">WASD</a> is <strong>the</strong> HTTP server package exclusive to OpenVMS. We&#8217;re going to compile and install it now so you can test out the compiler you just installed. There are architecture-specific packages we could use to install WASD, but I&#8217;m sure you&#8217;re eager to let it compile while you go make some coffee. We&#8217;ll start by downloading <strong>htroot930.zip</strong> from <a href="http://wasd.vsm.com.au/wasd/">wasd.vsm.com.au&#47;wasd&#47;</a>; make sure you are in your <strong>DOWNLOADS</strong>directory. After the transfer has completed, logout and then login as the SYSTEM user.</p>

<pre><code>$ wget http:&#47;&#47;wasd.vsm.com.au&#47;wasd&#47;htroot930.zip
$ lo
</code></pre>

<p>Because we have not covered the <strong>LOGIN.COM</strong> file yet, added our dcl$path to it and have not installed our utilities in [BIN] to a system-wide directory&#8230; we will have to manually set dcl$path. After this, we will change to the root of <strong>dua1</strong> using <strong>DUA1:[000000]</strong> as the path, and will finally unzip WASD there, and begin the installation.</p>

<pre><code>$ SET DEF dua1:[000000]
$ UNZIP dua1:[INT16H.DOWNLOADS]HTROOT930.ZIP
</code></pre>

<p>Extraction will take some time, it will result in the directory <strong>dua1:[HT_ROOT]</strong> being created. As per the WASD <a href="http://wasd.vsm.com.au/wasd/htroot930.txt">ReadMe</a> file - we may now proceed to install WASD.</p>

<pre><code>$ @DUA1:[HT_ROOT]INSTALL

%DCL-S-SPAWNED, process SYSTEM_1 spawned
%DCL-S-ATTACHED, terminal now attached to process SYSTEM_1

      WASD VMS Hypertext Services, Copyright (C) 1996-2008 Mark G.Daniel.
  This package (all associated programs), comes with ABSOLUTELY NO WARRANTY.
   This is free software, and you are welcome to redistribute it under the
 conditions of the GNU GENERAL PUBLIC LICENSE, version 3, or any later version.
                    http:&#47;&#47;www.gnu.org&#47;licenses&#47;gpl.txt

               ************************************************
               *  INSTALL WASD VMS HYPERTEXT SERVICES v9.3.0  *
               ************************************************

All sections may be individually declined before making any modifications.
In this sense the install may be undertaken step-by-step or sections repeated.
The first section is COMPILING&#47;LINKING, after which you will be able to quit.
In a mixed architecture cluster (including both Alpha and VAX systems) the
compile&#47;link section must be performed on both!

Press RETURN to continue: 

                             *******************
                             *  BUILD PACKAGE  *
                             *******************

Package executables must be built.

  0. skip this step
  1. compiling from source, then linking
  2. linking (separate package) object modules

Select build method [0]: 1

                   **************************************
                   *  NO SSL TOOLKIT COULD BE LOCATED!  *
                   **************************************

None of the following SSL toolkits could be located.

  o  OpenSSL toolkit
  o  VMS SSL product (HP)
  o  WASD OpenSSL package
  o  Jean-Fran?ois Pi?ronne (OpenSSL toolkit)

A non-SSL version of the server will be built.

Press RETURN to continue: 

                         **************************
                         *  BUILDING EXECUTABLES  *
                         **************************

%DCL-I-IGNQUAL, qualifiers appearing before this item were ignored
 \VERSION\
Compaq C V6.4-005 on OpenVMS VAX V7.3    

--- HTTPD ---

P1=BUILD
Building for "VAX" architecture
Without SSL
$ IF JUST .NES. "" THEN GOTO 
$!
$ DELETE [.OBJ_VAX]*.*;*
%DELETE-W-SEARCHFAIL, error searching for HT_ROOT:[SRC.HTTPD.OBJ_VAX]*.*;*
-RMS-E-FNF, file not found
$!
$ ADMIN:   CC &#47;DECC &#47;STAND=RELAXED_ANSI &#47;PREFIX=ALL &#47;OPTIMIZE &#47;NODEBUG &#47;NOWARNING 
    &#47;FLOAT=D_FLOAT &#47;DEFINE=(WASD_VMS_V6,WATCH_CAT=1,WATCH_MOD=0,WASD_ACME=0) 
    &#47;OBJ=[.OBJ_VAX]Admin    Admin.c
</code></pre>

<p>You <em>could</em> install one of the listed SSL toolkits, but we don&#8217;t really need SSL encryption for our little test (emulated) box at the moment. As previously mentioned, this will take some time - so find something constructive to do while you wait. I suggest looking for VAX or Alpha hardware on an auction site ;-).  </p>

<p>Eventually the build will finish. We have some more steps to do though:</p>

<pre><code>                            ********************
                            *  BUILD FINISHED  *
                            ********************

                          ************************
                          *  SERVER QUICK-CHECK  *
                          ************************

This executes the package demonstration procedure, allowing the basic package
to be evaluated or checked.  You may run this at any time to again check the
package for basic functionality using @HT_ROOT:[INSTALL]DEMO.COM

Execute the demonstration procedure? [NO]: NO

                        ****************************
                        *  CONTINUE INSTALLATION?  *
                        ****************************

Continue the installation? [NO]: YES

%SECHAN-I-RDBADDMSG, identifier WASD_HTTP_SERVER value 80010001 added to rights database
%SECHAN-I-RDBADDMSG, identifier WASD_HTTP_NOBODY value 80010002 added to rights database
%SECHAN-I-RDBADDMSG, identifier WASD_IGNORE_THIS value 80010003 added to rights database

                     **********************************
                     *  CREATE&#47;MODIFY SERVER ACCOUNT  *
                     **********************************

The &#39;server&#39; account HTTP$SERVER is the one the HTTPd process executes as.
It is considered a security advantage to script using a different account.

It must have a unique UIC, preferably in a group of it&#39;s own.
DO NOT choose the SYSTEM group ([1,*]) or other privileged group, or [3nn,*]
which is reserved to OpenVMS!

Note: [077,1] is a suggested UIC.
You will be shown whether the entered uic exists before continuing.
Entering "NONE" OR "0" skips account creation&#47;modification.

[077,1]: 077,1

%UAF-W-BADSPC, no user matches specification

If no user matched the specification then the UIC is available!
Choices: YES, create the account using this UIC.  NO, select another.

[NO]: YES
</code></pre>

<p>The server account &#8220;HTTP$SERVER&#8221; must have a unique home directory.</p>

<p>The default is a reasonable location for most sites.</p>

<p>If another device is preferred or already in place, out of the package tree,
then that can be specified and used.  The directory name should remain as
[HTTP$SERVER] however.  Package security settings are applied to this.</p>

<p>You will be shown whether the home area already exists before continuing.
Entering &#8220;NONE&#8221; OR &#8220;0&#8221; exits this dialog.</p>

<pre><code>[HT_ROOT:]: HT_ROOT

The area HT_ROOT:[HTTP$SERVER] currently exists.
Continue to use this?

[NO]: YES

HTTP$SERVER account created, setting ...
%UAF-I-MDFYMSG, user record(s) updated
%UAF-I-MDFYMSG, user record(s) updated
%UAF-I-MDFYMSG, user record(s) updated
%UAF-I-MDFYMSG, user record(s) updated
%UAF-I-GRANTMSG, identifier WASD_HTTP_SERVER granted to HTTP$SERVER

Username: HTTP$SERVER                      Owner:  WASD Server
Account:                                   UIC:    [77,1] ([HTTP$SERVER])
CLI:      DCL                              Tables: DCLTABLES
Default:  HT_ROOT:[HTTP$SERVER]
LGICMD:   LOGIN.COM
Flags:  DisNewMail DisMail
Primary days:   Mon Tue Wed Thu Fri        
Secondary days:                     Sat Sun
Primary   000000000011111111112222  Secondary 000000000011111111112222
Day Hours 012345678901234567890123  Day Hours 012345678901234567890123
Network:  ##### Full access ######            ##### Full access ######
Batch:    ##### Full access ######            ##### Full access ######
Local:    -----  No access  ------            -----  No access  ------
Dialup:   -----  No access  ------            -----  No access  ------
Remote:   -----  No access  ------            -----  No access  ------
Expiration:            (none)    Pwdminimum:  6   Login Fails:     0
Pwdlifetime:         90 00:00    Pwdchange:      (pre-expired) 
Last Login:            (none) (interactive),            (none) (non-interactive)
Maxjobs:         0  Fillm:       300  Bytlm:      5000000
Maxacctjobs:     0  Shrfillm:      0  Pbytlm:           0
Maxdetach:       0  BIOlm:      2000  JTquota:       4000
Prclm:         100  DIOlm:      1000  WSdef:         1000
Prio:            4  ASTlm:      2000  WSquo:         4000
Queprio:         0  TQElm:       100  WSextent:     20000
CPU:        (none)  Enqlm:       500  Pgflquo:     500000
Authorized Privileges: 
  NETMBX    TMPMBX
Default Privileges: 
  NETMBX    TMPMBX
Identifier                         Value           Attributes
  WASD_HTTP_SERVER                 %X80010001      

Press RETURN to continue: 
</code></pre>

<p>What is displayed at the end may be a lot to take in. It&#8217;s what user-accounts look like from UAF. There are a lot of different fields here which will be discussed at a later time, for now all you need to know that a user has been created for the server: <strong>HTTP$SERVER</strong> with a UIC of <strong>[77,1]</strong>. Hit RETURN to continue, and you will be presented with another prompt for creating an additional user - <strong>HTTP$NOBODY</strong>, which is used for the execution of DCL &#38; DECnet scripts. The defaults will be fine for us.</p>

<p>~</p>

<pre><code>Note: [076,1] is a suggested UIC.
You will be shown whether the entered uic exists before continuing.
Entering "NONE" OR "0" skips account creation&#47;modification.

[076,1]: 
[NO]: YES
[HT_ROOT:]:         

The area HT_ROOT:[HTTP$NOBODY] currently exists.
Continue to use this?

[NO]: YES
Press RETURN to continue: 

          ********************************************************
          *  GRANT WASD_HTTP_NOBODY TO OTHER SCRIPTING ACCOUNTS  *
          ********************************************************
If you have other accounts that script using files contained in the general
scripting areas ([CGI-BIN], [AXP-BIN], [IA64-BIN] or [VAX-BIN]) you almost
certainly will need to grant the WASD_HTTP_NOBODY rights identifer to allow
those accounts access to the files in the scripting directories.

If you use a scripting account (HTTP$NOBODY) separate to the server account
(HTTP$SERVER) you should never, and should never need to, grant the
WASD_HTTP_NOBODY identifier to the server account.  The idea is to isolate the
two environments as much as possible.

Account name? []: *ENTER*

                        *****************************
                        *  (RE)SECURE THE PACKAGE?  *
                        *****************************

Begin to make changes to files and security settings in the package.

Secure the package? [NO]: YES

                   **************************************
                   *  SETTING PACKAGE FILE PROTECTIONS  *
                   **************************************

Please be patient, this may take some (considerable) time ...

PROGRESS: 100...200...300...

We can proceed with with the installation, just install everything - I&#39;m sure you&#39;ll want to play with all the different scripts at some point.

                           *****************************
                            *  SERVER WRITE TO [LOCAL]  *
                            *****************************

    To allow updating of configuration files located in HT_ROOT:[LOCAL] via the
    Server Administration interface, the [LOCAL] directory must have a specific
    access control entry added.  Note that write access cannot occur unless
    HTTPD$AUTH path access is also configured.

    Allow server write access to [LOCAL]? [NO]: YES
~
                          *************************
                          *  HTTPD SUPPORT FILES  *
                          *************************

Copies files from HT_ROOT:[EXAMPLE]

  STARTUP.COM           to    HT_ROOT:[STARTUP]
  SHUTDOWN.COM          to    HT_ROOT:[STARTUP]
  STARTUP_DECNET.COM    to    HT_ROOT:[STARTUP]
  STARTUP_LOCAL.COM     to    HT_ROOT:[STARTUP]
  STARTUP_SERVER.COM    to    HT_ROOT:[STARTUP]

  HTTPD$AUTH.CONF       to    HT_ROOT:[LOCAL]
  HTTPD$CONFIG.CONF     to    HT_ROOT:[LOCAL]
  HTTPD$MAP.CONF        to    HT_ROOT:[LOCAL]
  HTTPD$MSG.CONF        to    HT_ROOT:[LOCAL]

Copy the files? [NO]: YES

                            *****************************
                            *  INSTALL PACKAGE SCRIPTS  *
                            *****************************

    The procedure HT_ROOT:[INSTALL]SCRIPTS.COM installs package scripts.
    It prompts for selected groups of scripts to be installed or removed.  More
    information is available when using the procedure.  Scripts available with this
    release of the package will not be available for use by the server until this
    procedure is performed.

    You can execute the procedure now or do it later manually.

    Execute the procedure now? [NO]: YES

                            ****************************
                            *  SERVER UTILITY SCRIPTS  *
                            ****************************

    PCACHE.EXE ......... proxy cache reporting and maintainance script
    PROXYMUNGE.EXE ..... reverse-proxy URL rewriting for HTML and CSS
    QDLOGSTATS.EXE ..... Quick and Dirty LOG STATisticS

    Install these scripts? [NO]: YES

                             ************************
                              *  USEFUL VMS SCRIPTS  *
                              ************************

    Conan The Librarian ..... Help and Text Library access
    HyperReader ............. Online Documentation, Bookreader and BNU access
    HyperSPI ................ System Performance Information
    hyperDISK ............... graphical disk usage report
    SHOW ...................  provides system information (must be enabled)

    Install these scripts? [NO]: YES

                           *****************************
                            *  DOCUMENT&#47;FILE SEARCHING  *
                            *****************************

    QUERY and EXTRACT are scripts that can be used to perform ad hoc searching of
    HTML and plain-text documents and files, returning all or partial documents.
    The scope of where they can search should be carefully controlled but they can
    be very useful.  Check script source descriptive prologue for more detail.

    Install these scripts? [NO]: YES

                       ***************************************
                       *  CGIPLUS&#47;RTE DEMONSTRATION SCRIPTS  *
                       ***************************************

    The CGIplus demonstration scripts are examples of how to create persistent
    scripting using DCL and the C language.  See the "Scripting Overview" document
    for further information on CGIplus.

    Includes the CGIsapi (ISAPI) environment and demonstration DLL.

    Includes the RTE (Run Time Environment) example interpreter.

    Install these scripts? [NO]: YES

                           *******************************
                           *  DCL DEMONSTRATION SCRIPTS  *
                           *******************************

    The DCL demonstration scripts are examples of CGI scripting using DCL.

    CGI_SYMBOLS.COM ....... displays the CGI variables available to a script
    CGIUTL.EXE ............ utility for assisting with DCL scripts
    COOKIE_DEMO.COM ....... an example of cookie manipulation using DCL.
    FORMWORK.EXE .......... HTML form data validation and CSV processor
    IPCTICKLER.EXE ........ script programmer  education tool
    TMAILER.EXE ........... email using a template

    Some include using the CGIUTL utility within the DCL environment.

    Install these scripts? [NO]: YES

                             ***************************
                             *  MISCELLANEOUS SCRIPTS  *
                             ***************************

    Calendar ........ simple calendar maker
    Charset ......... displays the browser character set
    Colors .......... displays fonts with different fore&#47;background colors
    Fetch ........... can get pages and other resources from HTTP servers
    gList ........... list and display graphics in a directory

    Install these scripts? [NO]: YES

                      **************************************
                       *  OSU&#47;DECNET DEMONSTRATION SCRIPTS  *
                       **************************************

    These are some OSU demonstration scripts (from the OSU package).
    There are also WASD-specific CGI DECnet script examples.

    Install these scripts? [NO]: YES

                          ********************************
                          *  JAVA DEMONSTRATION CLASSES  *
                          ********************************

    The JAVA.COM java script wrapper procedure and example Java classes.

    Install these scripts? [NO]: YES
</code></pre>

<p>Well done! You now have a working HTTP server installed on your system. You can start it up now by running its startup file.</p>

<pre><code>$ set def DUA1:[HT_ROOT.STARTUP]
$ @startup.com
%WASD-I-STARTUP, begin
%WASD-I-STARTUP, using non-SSL image
%HTTPD-S-PROC_ID, identification of created process is 00000218
%WASD-I-STARTUP, end
</code></pre>

<p>Everything appears to be in order, let&#8217;s have a look at the running processes:</p>

<pre><code>$ show system&#47;full
OpenVMS V7.3  on node CGXVAX  14-JAN-2009 20:28:15.61  Uptime  1 21:25:15
        VAXserver 3900 Series
  Pid    Process Name    State  Pri      I&#47;O       CPU       Page flts  Pages
00000201 SWAPPER         HIB     16        0   0 00:00:00.15         0      0   
         [SYSTEM]                                                           0Kb
00000205 CONFIGURE       HIB      8        5   0 00:00:00.06       112    175   
         [SYSTEM]                                                          87Kb
00000206 LANACP          HIB     12       41   0 00:00:00.11       354    712   
         [SYSTEM]                                                         356Kb
00000208 IPCACP          HIB     10        6   0 00:00:00.10        99    177   
         [SYSTEM]                                                          88Kb
00000209 ERRFMT          HIB      8     1475   0 00:00:00.41       146    227   
         [1,6]                                                            113Kb
0000020B OPCOM           HIB      8      264   0 00:00:00.31       328    180   
         [SYSTEM]                                                          90Kb
0000020C AUDIT_SERVER    HIB     10       96   0 00:00:01.00       528    919   
         [SYSTEM]                                                         459Kb
0000020D JOB_CONTROL     HIB     10       48   0 00:00:00.17       192    343   
         [SYSTEM]                                                         171Kb
0000020E SECURITY_SERVER HIB     10       32   0 00:00:03.05      1869   1509   
         [SYSTEM]                                                         754Kb
0000020F TP_SERVER       HIB      9    10886   0 00:00:44.46       205    317   
         [SYSTEM]                                                         158Kb
00000210 TCPIP$INETACP   HIB     10      155   0 00:00:00.53       757    855   
         [SYSTEM]                                                         427Kb
00000214 INT16H          LEF      9      120   0 00:00:00.37       714    512   
         [INT16H]                                                         256Kb
00000216 SYSTEM          CUR      5    20474   0 00:02:13.67      7147    336   
         [SYSTEM]                                                         168Kb
00000218 HTTPd:80        HIB      6      840   0 00:00:05.02      3764   3091   
         [HTTP$SERVER]                                                   1545Kb
</code></pre>

<p>Excellent. Not only is WASD HTTPd running, it&#8217;s running as the user it should be - <strong>HTTP$SERVER</strong>. Try opening a browser and accessing your new server. Many of the demo scripts+functions won&#8217;t work for security reasons - you will be able to enable what you like later on when you configure and customize your server. For now, you can run &#8216;<strong>DEMO.COM</strong>&#8217; from &#8216;<strong>DUA1:[HT_ROOT.INSTALL]</strong>&#8217; which will start a demonstration server up on port 7080 in &#8220;promiscuous&#8221; mode. This should allow you to test the examples included with WASD. Be warned though, some scripts will cause the demo instance to die due the &#8216;SYSTEM&#8217; account&#8217;s <strong>AST quota</strong>. Quotas and the UAF will be explained later.</p>

]]></description>
</item>

<item>
<guid>/articles/openvms_simh_1.html</guid>
<link>/articles/openvms_simh_1.html</link>
<pubDate>Sat, 10 Jan 2009 00:00:00 +0000</pubDate>
<title></title>
<description><![CDATA[

<h4 id="OpenVMS%20and%20SIMH%20-%20Part%201">OpenVMS and SIMH - Part 1</h4>

<p>Running OpenVMS on the SIMH VAX simulator</p>

<p><a href="http://en.wikipedia.org/wiki/OpenVMS">OpenVMS</a>  is an operating system originally developed by  <a href="http://en.wikipedia.org/wiki/Digital_Equipment_Corporation">DEC</a>  (Digital Equipment Corporation), a company acquired by  <a href="http://en.wikipedia.org/wiki/Compaq">Compaq</a>  which was then acquired by  <a href="http://en.wikipedia.org/wiki/Hewlett-Packard">HP</a>  for the  <a href="http://en.wikipedia.org/wiki/VAX">VAX</a>  platform.  </p>

<p>Although development started in the mid-1970s into the 1980s, OpenVMS is still very much alive with up-to version 7.3 available for VAX, and continued development in 8.x for  <a href="http://en.wikipedia.org/wiki/DEC_Alpha">DEC Alpha</a>  and now Intel  <a href="http://en.wikipedia.org/wiki/Itanium">Itanium</a>  architectures. Even Oracle, who acquired DEC&#8217;s  <a href="http://en.wikipedia.org/wiki/Oracle_Rdb">Rdb</a>  RDBMS have  <a href="http://www.oracle.com/technology/products/rdb/htdocs/rdb7/rdb_statement_of_direction.html">stated</a>  that they will continue to support and develop Rdb, creating a lesser gap between it and Oracle Database systems.  </p>

<p><a href="http://en.wikipedia.org/wiki/SIMH">SIMH</a>  is a set of emulators for various systems and is developed by Bob Supnik, who is a former engineer for DEC. One of the systems it is able to emulate is the VAX. This is what we&#8217;re interested in. An excellent feature of SIMH (among many) is that it supports networking (albeit experimental support; I&#8217;ve had no problems so far).  </p>

<p>If you are unable to install OpenVMS, consider looking at  <del><a href="http://deathrow.vistech.net/">http:&#47;&#47;deathrow.vistech.net</a>  (Beave&#8217;s former OpenVMS cluster)</del> <a href="http://www.polarhome.com/">PolarHome</a> where you can get a taste of OpenVMS without installation.  </p>

<p>So, we&#8217;re going to install OpenVMS within SIMH&#8217;s VAX emulator. There are a few prerequisites, some of which may be difficult to meet:</p>

<ul>
<li>  <a href="http://simh.trailing-edge.com/">SIMH w&#47; Networking</a>  (  <a href="http://simh.trailing-edge.com/sources/simhv38-0-exe-ether.zip">win32</a>  &#47;  <a href="http://macappstore.org/simh/">macOS</a>)</li>
<li>  <a href="http://www.winpcap.org/">WinPcap</a>  (for win32 SIMH networking)</li>
<li>  A  <a href="http://en.wikipedia.org/wiki/DECUS">HP User Society (Formerly DECUS)</a>  membership (hint:  <a href="https://www.connect-community.de/Membership/application">Connect Deutschland</a>  has no fee for basic membership. Site is in German)</li>
<li> <a href="https://www.hpe.com/h41268/live/index_e.aspx?qid=24548">HPE OpenVMS Hobbyist Registration</a>  (For your license PAKs)</li>
<li>  <a href="http://mirrors.pdp-11.ru/_vax__/_VMS/_distrib/7.X/">OpenVMS 7.3 VAX Media</a></li>
</ul>

<p>DECUS membership is required to be able to register licenses for your hobbyist system. Some chapters may issue your membership number straight away online, others will send you a membership card in the post.</p>

<p>When HPE exit the OpenVMS game and VSI fully take over, there is no guarantee that the hobbyist program will be continued, though I heard from Hari at HPE that they are interested in fostering the program for their own VMS version.</p>

<p><strong>!!! Mac OS X Note !!!</strong>  </p>

<p>The binaries linked to in the prerequisites may fail on your system.<br/>
On Mac OS X 10.5.5 (Intel) they caused problems for me, so you should  install Apple Xcode and compile from source. Follow <a href="https://web.archive.org/web/20090312034321/http://64.223.189.234/node/922">this guide</a> if using GCC 4.x.  </p>

<p><strong>!!!</strong>  </p>

<p><strong>Getting Ready</strong>  </p>

<p>I&#8217;ll assume that you have already received the OpenVMS VAX and additional license paks via E-mail. The licenses aren&#8217;t required to install OpenVMS - but without them you will have a very limited installation.  </p>

<p>Start off by creating a directory somewhere, be this <em>~&#47;OpenVMS</em>, <em>C:\OpenVMS</em>, <em>&#47;Users&#47;int16h&#47;OpenVMS</em> or wherever you please. Copy the VAX emulator from SIMH to this directory, as well as <strong>ka655.bin</strong>. If you have an ISO image of the installation media, copy those there too (I will be using an ISO for this tutorial).  </p>

<p><strong>Configuring SIMH::VAX</strong>  </p>

<p>SIMH needs to know how much RAM and other virtual hardware you will be attaching. Although you could do this from the SIMH prompt, it&#8217;s not very practical so we will create a config file named <strong>openvms.ini</strong>. Below is a commented config which will suit our needs, but you will need to customize it for your own use.</p>

<pre><code>; Load CPU microcode
load -r ka655.bin
;
; Set memory allocation to 64M
set cpu 64m
;
; We will have 2 DEC RA92 disk drives, about 1.5G capacity.
set rq0 ra92
set rq1 ra92
;
; rq3 will be a CD-ROM drive
set rq3 cdrom
;
; Attach the devices to files, these will be our virtual disks
attach rq0 d0.dsk
attach rq1 d1.dsk
;
; Attach the CD-ROM drive to our installation media ISO (use &#39;dd&#39; ;)
attach -r rq3 OpenVMS73.iso
;
; We don&#39;t need rl and ts devices, so we can disable them.
;
set rl disable
set ts disable
;
; Attach Ethernet to a network interface. This will work in &#39;bridged&#39;
; mode. Make sure to define a fake MAC address if using Windows.
; Unlike Linux, *BSD etc Windows does not have a nice, logical alias
; for network interfaces.
;
; Windows Example:
;set xq mac=08-00-2B-AA-BB-CC
;attach xq \Device\NPF_{9622ACD6-7383-4C42-B8F3-FBFA22573B71}
;
; Linux&#47;*BSD&#47;UNIX Example:
;attach xq eth0
;
; Mac OS X:
;attach xq en0
;
; Uncomment the following if you&#39;d prefer to telnet into SIMH
; from another machine rather than use the local console, 6969=port.
;
;set telnet 6969
;
;
; Boot the system:
;
boot cpu
</code></pre>

<p>Save this file, and make sure you&#8217;re in the directory you created in a terminal.  </p>

<p><strong>Installing OpenVMS</strong>  </p>

<pre><code>Run: **.&#47;vax openvms.ini**

sh-3.2# .&#47;vax openvms.ini 
VAX simulator V3.8-0
RQ: unit is read only
Eth: opened en0

KA655-B V5.3, VMB 2.7
Performing normal system tests.
40..39..38..37..36..35..34..33..32..31..30..29..28..27..26..25..
24..23..22..21..20..19..18..17..16..15..14..13..12..11..10..09..
08..07..06..05..04..03..
Tests completed.

&#62;&#62;&#62;
</code></pre>

<p>Good. The system has booted and is now awaiting further instructions. Those of you familiar with Sun SPARC hardware may recognise an initial firmware prompt like this. From here, we will boot our virtual CD-ROM with <strong>boot dua3</strong>.</p>

<pre><code>&#62;&#62;&#62;boot dua3
(BOOT&#47;R5:0 DUA3
  2..
-DUA3
  1..0..

%SYSBOOT-I-SYSBOOT Mapping the SYSDUMP.DMP on the System Disk
%SYSBOOT-W-SYSBOOT Can not map SYSDUMP.DMP on the System Disk
%SYSBOOT-W-SYSBOOT Can not map PAGEFILE.SYS on the System Disk
   OpenVMS (TM) VAX Version X7G7 Major version id = 1 Minor version id = 0
%WBM-I-WBMINFO Write Bitmap has successfully completed initialization.
PLEASE ENTER DATE AND TIME (DD-MMM-YYYY  HH:MM)  09-JAN-2009 20:11

OpenVMS installation will now probe your system for available devices. Once it has finished enumerating your devices, it will prompt you to enter "**YES**".

Configuring devices . . .
Now configuring HSC, RF, and MSCP-served devices . . .

Please check the names of the devices which have been configured,
to make sure that ALL remote devices which you intend to use have
been configured.

If any device does not show up, please take action now to make it
available.

Available device  DUA0:                            device type RA92
Available device  DUA1:                            device type RA92
Available device  DUA2:                            device type RD54
Available device  DUA3:                            device type RRD40
Available device  DYA0:                            device type RX02
Available device  DYA1:                            device type RX02
Available device  MUA0:                            device type TK50
Available device  MUA1:                            device type TK50
Available device  MUA2:                            device type TK50
Available device  MUA3:                            device type TK50

Enter "YES" when all needed devices are available:  YES
%BACKUP-I-IDENT, Stand-alone BACKUP T7.2; the date is  9-JAN-2009 20:15:24.42
</code></pre>

<p>You will now be dropped at what looks like a shell-prompt. OpenVMS and OpenVMS components are generally installed by extracting backup archives. This of course comes from the days when tape drives were more common. Let&#8217;s extract the backup saveset to our first drive with &#8220;<strong>backup dua3:vms073.b&#47;save_set dua0:</strong>&#8221;:</p>

<pre><code>$ backup dua3:vms073.b&#47;save_set dua0:

%BACKUP-I-PROCDONE, operation completed.  Processing finished at  9-JAN-2009 20:20:00.82
If you do not want to perform another standalone BACKUP operation,
use the console to halt the system.

If you do want to perform another standalone BACKUP operation, 
ensure the standalone application volume is online and ready.
Enter "YES" to continue: 
</code></pre>

<p>This will take a short time, and you won&#8217;t be informed until it is complete. We are finished with this for now, so you may press CTRL-E to halt our system and drop you at the SIMH prompt. Now we boot the system again with &#8220;<strong>boot cpu</strong>&#8221;:</p>

<pre><code>Simulation stopped, PC: 839ABD46 (BEQL 839ABDB4)
sim&#62; boot cpu

KA655-B V5.3, VMB 2.7
Performing normal system tests.
40..39..38..37..36..35..34..33..32..31..30..29..28..27..26..25..
24..23..22..21..20..19..18..17..16..15..14..13..12..11..10..09..
08..07..06..05..04..03..
Tests completed.
</code></pre>

<p>Great. Now this time, instead of booting <strong>dua3</strong>, we will boot our first virtual hard disk where we just installed the backup to - <strong>dua0</strong>:</p>

<pre><code>&#62;&#62;&#62;set boot dua0
&#62;&#62;&#62;boot
(BOOT&#47;R5:0 DUA0

  2..
-DUA0
  1..0..

%SYSBOOT-I-SYSBOOT Mapping the SYSDUMP.DMP on the System Disk
%SYSBOOT-W-SYSBOOT Can not map SYSDUMP.DMP on the System Disk
%SYSBOOT-I-SYSBOOT Mapping PAGEFILE.SYS on the System Disk
%SYSBOOT-I-SYSBOOT SAVEDUMP parameter not set to protect the PAGEFILE.SYS
   OpenVMS (TM) VAX Version BI73-7G7 Major version id = 1 Minor version id = 0
%WBM-I-WBMINFO Write Bitmap has successfully completed initialization.

           OpenVMS VAX V7.3 Installation Procedure

                 Model: VAXserver 3900 Series
                 System device: RA92 - _DUA0:
                   Free Blocks: 2854566
                      CPU type: 10-01

* Please enter the date and time (DD-MMM-YYYY HH:MM) 09-JAN-2009 20:36
</code></pre>

<p>As you can see, we are now entering the real OpenVMS installation and it reports that we are using a VAXServer 3900, the system disk is a DEC RA92 and we have 2854566 blocks free. Enter the current date+time, then hit enter.  </p>

<p>You&#8217;ll see quite a few messages scrolling up the screen, one which may seem quite alarming is:</p>

<pre><code>%%%%%%%%%%%  OPCOM   9-JAN-2009 20:36:08.92  %%%%%%%%%%%
Message from user SYSTEM
%LICENSE-E-NOAUTH, DEC VAX-VMS use is not authorized on this node
-LICENSE-F-NOLICENSE, no license is active for this software product
-LICENSE-I-SYSMGR, please see your system manager
</code></pre>

<p>During the install, we will enter our license for DEC VAX-VMS; So just ignore this for now. Let&#8217;s continue:</p>

<p>If this system disk is to be used in an OpenVMS Cluster with multiple system disks, then each system disk must have a unique volume label. Any nodes having system disks with duplicate volume labels will fail to boot into the cluster.</p>

<pre><code>   You can indicate a volume 
   label of 1 to 12 characters in length.
   If you want to use the default name of
   OVMSVAXSYS, press RETURN in response to
   the next question.

* Enter the volume label for this system disk [OVMSVAXSYS]: 
</code></pre>

<p>For this tutorial, I won&#8217;t cover setting up a cluster so just leave the default.</p>

<pre><code>* Enter name of drive holding the OpenVMS distribution media: DUA3
* Is the OpenVMS media ready to be mounted? [N] Y
%MOUNT-I-MOUNTED, VAXVMS073 mounted on _DUA3:

   Select optional software you want to install.  You can install one
   or more of the following OpenVMS or DECwindows components:

    o OpenVMS library                              -  52200 blocks
    o OpenVMS optional                             -  19000 blocks
    o OpenVMS Help Message                         -  10400 blocks
    o OpenVMS Management Station                   -  20000 blocks
    o DECwindows base support                      -   4400 blocks
    o DECwindows workstation support               -  23800 blocks
          -  75 dots per inch video fonts          -    (included)
          - 100 dots per inch video fonts          -   6200 blocks
    o DECnet-Plus networking                       -  80000 blocks
    o DECnet Phase IV networking                   -    800 blocks

        Space remaining on system disk:  2854377 blocks
</code></pre>

<p>You can go ahead and install everything if you have space, I imagine you will want to see everything OpenVMS has to offer at some point - so it&#8217;s best to install these sets now rather than later.</p>

<pre><code>* Do you want to install the OpenVMS library files? (Y&#47;N) Y

    Space remaining on system disk:  2802177 blocks

* Do you want to install the OpenVMS optional files? (Y&#47;N) Y

    Space remaining on system disk:  2783177 blocks

~~

* Do you want to install the MSGHLP database? (Y&#47;N) Y

~~ 

* Where do you want to install the MSGHLP database?
    [SYS$COMMON:[SYSHLP]] [ENTER]

~~

* Do you want to install the optional OpenVMS Management Station files? (Y&#47;N) Y

~~

* Do you want the DECwindows base support? (Y&#47;N) Y

~~

* Do you want to install DECwindows workstation support? (Y&#47;N) Y

~~

* Do you want 100 dots per inch video fonts installed? (Y&#47;N) Y

~~

* Do you want to install DECnet-Plus? (Y&#47;N) Y

~~

    The following options will be provided:

        OpenVMS library
        OpenVMS optional
        OpenVMS Help Message
        OpenVMS Management Station Software -- PC files
        DECwindows base support
        DECwindows workstation support with:
            -  75 dots per inch video fonts
            - 100 dots per inch video fonts
        DECnet-Plus

    Space remaining on system disk:  2638377 blocks

* Is this correct? (Y&#47;N) Y
</code></pre>

<p>Phew! Now, at last - the backup save sets will be extracted&#47;restored. This will take some time, enough for a cigarette at least. When it completes, you&#8217;ll be presented with some useful information regarding OpenVMS Clusters:</p>

<pre><code>In an OpenVMS Cluster, you can run multiple systems sharing all files
   except PAGEFILE.SYS, SWAPFILE.SYS, SYSDUMP.DMP, and VAXVMSSYS.PAR.

   Cluster configuration cannot be done at this time because no network
   is present.  In order to configure a cluster you must FIRST do one
   or both of the following:

   o Install DECnet-Plus (or DECnet Phase IV), or
   o Execute SYS$STARTUP:LAN$STARTUP.COM by removing the
      comment delimiter ("!") from the line

          $! @SYS$STARTUP:LAN$STARTUP

     in SYS$MANAGER:SYSTARTUP_VMS.COM.

   Then configure the cluster by executing the following command:

             @ @SYS$MANAGER:CLUSTER_CONFIG

   See the OpenVMS System Manager&#39;s Manual: Essentials for more information.
</code></pre>

<p>For future reference, you should keep a copy of such messages for future configuration of components.</p>

<pre><code>    * Do you want DECwindows Motif as the default windowing system? (Y&#47;N) Y

   Now we will ask you for new passwords for the following accounts:

        SYSTEM, SYSTEST, FIELD

   Passwords must be a minimum of 8 characters in length.  All passwords
   will be checked and verified.  Any passwords that can be guessed easily
   will not be accepted.
</code></pre>

<p>Now, this is the equivalent of setting your root password on a UNIX-like Operating System. Make sure to set a decent password for SYSTEM and different passwords for SYSTESY and FIELD. You could make them all the same if you&#8217;re not planning on allowing anyone else to access your new OpenVMS system.</p>

<pre><code>* Enter password for SYSTEM: 
* Re-enter for verification: 
%UAF-I-MDFYMSG, user record(s) updated
%VMS-I-PWD_OKAY, account password for SYSTEM verified
</code></pre>

<p>You&#8217;ll see similar messages for the remaining accounts.</p>

<pre><code>Creating RIGHTS database file, SYS$SYSTEM:RIGHTSLIST.DAT
Ignore any "-SYSTEM-F-DUPIDENT, duplicate identifier" errors.

%UAF-I-RDBCREMSG, rights database created
%UAF-I-RDBADDMSGU, identifier DEFAULT value [000200,000200] added to rights database
%UAF-I-RDBADDMSGU, identifier FIELD value [000001,000010] added to rights database
%UAF-I-RDBADDMSGU, identifier SYSTEM value [000001,000004] added to rights database
%UAF-I-RDBADDMSGU, identifier SYSTEST value [000001,000007] added to rights database
%UAF-E-RDBADDERRU, unable to add SYSTEST_CLIG value [000001,000007] to rights database
-SYSTEM-F-DUPIDENT, duplicate identifier
%UAF-I-NOMODS, no modifications made to system authorization file
%UAF-I-RDBDONEMSG, rights database modified

Creating MODPARAMS.DAT database file, SYS$SYSTEM:MODPARAMS.DAT
</code></pre>

<p>These UAF messages confirm that the rights database has been created, and the system users have been added. We will use the UAF (User Authorization File) tool later to add a normal user.  </p>

<p>Next you&#8217;ll be prompted for the SCSNODE name and SCSSYSTEMID for your VMS node, as this is your first installation and not part of a cluster - enter what you like (within reason, the SCSSYSTEMID should be between 1025 and 65535).</p>

<pre><code>* Please enter the SCSNODE name: CGXVAX

* Please enter the SCSSYSTEMID:  1025
</code></pre>

<p>Now you should have your OpenVMS licenses&#47;PAKs (Product Authorization Keys) ready.</p>

<p>Continuing with OpenVMS VAX V7.3 Installation Procedure.</p>

<pre><code>    Configuring all devices on the system ...

    If you have Product Authorization Keys (PAKs) to register, you can
    register them now.

* Do you want to register any Product Authorization Keys? (Y&#47;N): Y

    VMS License Management Utility Options:

        1. REGISTER a Product Authorization Key
~~

Enter one of the above choices [1]: 1
Do you have your Product Authorization Key? [YES]: YES

Find your PAK for "VAX-VMS". This PAK will be entered manually by extracting the information from each field and entering them when prompted... For future PAKs, you may copy-paste the command straight from your e-mail.


Here is a list of the license information just entered:

                     Issuer:  OPENVMS_HOBBYIST
              Authorization:  DECUS-XXX-#########-#######
               Product Name:  VAX-VMS
                   Producer:  DEC
                      Units:  0
               Release Date:  
                    Version:  
           Termination Date:  ##-XXX-####
               Availability:  
                   Activity:  A
                    Options:  NO_SHARE
                      Token:  
                Hardware ID:  
                   Checksum:  #-XXXX-XXXX-XXXX-XXXX

Is that correct? [YES]:YES
Registering VAX-VMS license in SYS$COMMON:[SYSEXE]LMF$LICENSE.LDB...

Do you want to LOAD this license on this system? [YES]:
%LICENSE-I-LOADED, DEC VAX-VMS was successfully loaded with 0 units

You may enter some other PAKs now, or wait until later. I will install others later. Enter &#39;99 [enter]&#39; to exit the license management utility.

********************************************************************************

    After the system has rebooted you should register any additional
    Product Authorization Keys (PAKs) you have, or receive in the
    future, by executing the following procedure:

        $ @SYS$UPDATE:VMSLICENSE

    See the OpenVMS License Management Utility Manual for any additional
    information you need.

********************************************************************************
</code></pre>

<p>Another piece of useful information to remember for later. Now, you&#8217;ll be prompted to set your time zone. Follow the prompts until you&#8217;re asked to provide information about DECnet-Plus, then respond as follows:</p>

<pre><code>* Enter name of drive holding the DECnet-Plus kit: DUA3
* Is DUA3: ready to be mounted? [N] y

The following product has been selected:
    DEC VAXVMS DECNET_OSI V7.3             Layered Product

~~

This product requires one of two PAKs: DVNETEND or DVNETRTG.

Do you want the defaults for all options? [YES] YES
</code></pre>

<p>This set isn&#8217;t required, but as we had had chosen to install everything earlier - we may as well. Installation will run for a few minutes, then OpenVMS Installation will run AUTOGEN to update the system. This will take a couple of minutes, then the system will be rebooted - dropping you back at the SIMH prompt. Start the system back up:</p>

<pre><code>sim&#62; boot cpu

KA655-B V5.3, VMB 2.7
Performing normal system tests.
40..39..38..37..36..35..34..33..32..31..30..29..28..27..26..25..
24..23..22..21..20..19..18..17..16..15..14..13..12..11..10..09..
08..07..06..05..04..03..
Tests completed.

&#62;&#62;&#62;boot
(BOOT&#47;R5:0 DUA0

Soon you will see:

*****************************************************************

OpenVMS VAX V7.3

You have SUCCESSFULLY installed the OpenVMS VAX Operating System.

The system is now executing the STARTUP procedure.  Please
wait for the completion of STARTUP before logging in to the
system.

*****************************************************************

%STDRV-I-STARTUP, OpenVMS startup begun at  9-JAN-2009 21:56:36.10

~~~

%SET-I-INTSET, login interactive limit = 64, current interactive value = 0
  SYSTEM       job terminated at  9-JAN-2009 21:57:04.05

  Accounting information:
  Buffered I&#47;O count:            1621         Peak working set size:    1624
  Direct I&#47;O count:               613         Peak page file size:      5504
  Page faults:                   5578         Mounted volumes:             0
  Charged CPU time:           0 00:00:24.99   Elapsed time:     0 00:00:31.61
</code></pre>

<p>Congratulations! You have installed OpenVMS 7.3 \o&#47;. Now after all those pages of instructions and console-pastes, we&#8217;ll proceed to configure OpenVMS a little bit.  </p>

<p><strong>Configuring OpenVMS</strong>  </p>

<p>So, you are now presented with some information about your new system. Where do you go from here? Press <strong>enter</strong> and you&#8217;ll see a welcome-banner followed by a prompt for you to login. Enter &#8216;<strong>SYSTEM</strong>&#8217; as the username, and the password you set during installation.</p>

<pre><code>Username: SYSTEM
Password: 
 Welcome to OpenVMS (TM) VAX Operating System, Version V7.3
$ 
</code></pre>

<p>At this point, I can see all you UNIX-like OS users gagging to explore the system and run commands such as &#8216;uptime&#8217; and &#8216;uname -a&#8217; to show off to all your friends. Well, I&#8217;m extremely sorry to disappoint you (and perhaps wasted your time so far!) but OpenVMS is not UNIX or in fact similar to any derivatives in any way. You can throw any hopes of POSIX compatibility out the window, too (well, there <em>is</em> a POSIX compatibility interface&#47;set for OpenVMS but we won&#8217;t go into that ;).  </p>

<p>To satisfy the needs of your e-penis, you may run &#8220;<strong>sh sys</strong>&#8221; or in its full form: &#8220;<strong>show system</strong>&#8221;. The &#8220;show&#8221; command is used to spit out a variety of information, many embedded devices such as routers have similar functions.</p>

<pre><code>$ sh sys
OpenVMS V7.3  on node CGXVAX   9-JAN-2009 22:17:25.96  Uptime  0 00:21:04
  Pid    Process Name    State  Pri      I&#47;O       CPU       Page flts  Pages
00000201 SWAPPER         HIB     16        0   0 00:00:00.21         0      0   
00000205 CONFIGURE       HIB      8        5   0 00:00:00.06       112    175   
00000206 LANACP          HIB     12       33   0 00:00:00.25       366    788   
00000208 IPCACP          HIB     10        6   0 00:00:00.03        99    177   
00000209 ERRFMT          HIB      8       44   0 00:00:00.14       153    234   
0000020B OPCOM           HIB      8       48   0 00:00:00.19       304    150   
0000020C AUDIT_SERVER    HIB     10      133   0 00:00:00.53       569    815   
0000020D JOB_CONTROL     HIB     10       30   0 00:00:00.12       191    342   
0000020E SECURITY_SERVER HIB     10       35   0 00:00:00.43       766   1349   
00000211 SYSTEM          CUR      7       97   0 00:00:00.62       869    498   
</code></pre>

<p>This isn&#8217;t too different from what you&#8217;d see in a screen-dump of the &#8216;top&#8217; command on UNIX-like systems.  </p>

<p>Now, let&#8217;s get back on track. OpenVMS uses <a href="http://en.wikipedia.org/wiki/DIGITAL_Command_Language">DCL (DIGITAL Command Language)</a>, a scripting language developed by DIGITAL for their Operating Systems. You may think of it as the OpenVMS equivalent of BASH in that it&#8217;s used as a &#8220;shell&#8221;&#47;CLI as well as a normal scripting language.  </p>

<p>So far, we have used DUA3 (our virtual CD-ROM drive) and DUA0 (Our first hard disk), now we will initialise DUA1, our second virtual hard disk. It is good practice to keep system files on one disk, and data on others. This is especially useful for when&#47;if you need to reinstall the Operating System, you can keep your users&#8217; data. Let&#8217;s initialise the disk now and mount it:</p>

<pre><code>$ initialize dua1: DATA
$ mount&#47;system dua1 data
%MOUNT-I-MOUNTED, DATA mounted on _CGXVAX$DUA1:
</code></pre>

<p><strong>n.B. Remember to have around another 1.5G of space free for this else bad things will happen. On initialisation of the new volume, the file d1.dsk grew to 719M</strong>  </p>

<p>This is what you don&#8217;t want to happen, else you&#8217;ll need to boot the system again:</p>

<pre><code>$ initialize dua1: DATA
RQ I&#47;O error: No space left on device
I&#47;O error, PC: 83430D36 (ASHL #1,R3,R0)
sim&#62; 
</code></pre>

<p>Now that we have a new disk initialised and mounted, we will edit the site-specific startup file &#8220;<strong>sys$manager:systartup_vms.com</strong>&#8221; and add the mount command above so we don&#8217;t have to manually mount the volume at each startup. We will need to let OpenVMS know that we are using a VT100-compatible terminal so we can use the full-screen VMS editor &#8220;edit&#8221; properly:</p>

<pre><code>$ set term&#47;vt100
$ edit sys$manager:systartup_vms.com
</code></pre>

<p>There&#8217;s no right or wrong place to put this command really, but I like to mount volumes just before DECnet is setup+started. A general rule is to mount any additional volumes first, before running any startup processes which may rely on the volume being available:</p>

<pre><code>$! To start a batch queue, remove the comment delimiter ($!) from the
$! following command line.
$!
$!$ START &#47;QUEUE SYS$BATCH
$!
$ mount&#47;system dua1: data
$!
$! In order to use asynchronous DECnet Phase IV on OpenVMS VAX systems only,
$! remove the comment delimiter ($!) from the next two lines.

Press CTRL-Z to save and quit &#39;EDIT&#39;.

409 lines written to file SYS$COMMON:[SYSMGR]SYSTARTUP_VMS.COM;2
$ 
</code></pre>

<p>You may be wondering why &#8220;;2&#8221; is appended to the filename. OpenVMS stores multiple revisions of files as they are updated&#47;edited. Some other operating systems and&#47;or filesystems work in this manner including Novell Netware. You shouldn&#8217;t have any problems with this, until you try and delete a file - OpenVMS will ask you to specify which revision you&#8217;d like to delete ;).  </p>

<p><strong>Adding Users</strong>  </p>

<p>As in UNIX-like systems, OpenVMS has user and group IDs, however, unlike UNIX - they are not entities you can reference separately. The UID and GID-like values are an exclusive singleton, which is called a UIC (User Identification Code), the format of a UIC is [###,###] - where the first part is the group, and the second is the user. By default, users added to the UAF are disabled. We will now add our first user, whose &#8216;home&#8217; directory is on our new disk, will have full system privileges and won&#8217;t be disabled:</p>

<pre><code>$ set def sys$system
$ r authorize
UAF&#62; add int16h&#47;password=t3mp123&#47;owner="int16h"&#47;dev=dua1&#47;dir=[int16h]&#47;uic=[200,201]&#47;flag=nodisuser&#47;priv=all
%UAF-I-ADDMSG, user record successfully added
~~
</code></pre>

<p><strong>set def</strong> - This is short for &#8220;set default&#8221;, which is the equivalent of the &#8220;cd&#8221; command on UNIX-like operating systems. Navigating around an OpenVMS system may take some getting used to, just think of it as the step after moving from DOS to UNIX. In this case:</p>

<blockquote>
<p>sys$system</p>
</blockquote>

<p>is an alias for </p>

<blockquote>
<p><strong>CGXVAX$DUA0:[SYS0.SYSCOMMON.][SYSEXE]</strong></p>
</blockquote>

<p><strong>r authorize</strong> - &#8220;r&#8221; is the shortened command for run. We need to be in the sys$system logical directory to run &#8216;authorize&#8217; as this is where SYSUAF.DAT is stored.  </p>

<p>So, basically we are adding the user &#8216;int16h&#8217;, with initial password of &#8216;t3mp123&#8217; (this will be changed at first-login), owner is the user&#8217;s real-name, dev is the device where the user&#8217;s initial&#47;home directory will reside, dir is the name of the directory on &#8216;dev&#8217;, uic is the user&#8217;s UIC (groupid,uid - default group is 200), we have added the nodisuser flag to ensure the account isn&#8217;t disabled, and finally we have given the uses all privileges on the system.  </p>

<p>After you run the &#8216;add&#8217; line at the UAF prompt, your screen will fill with security notices. You should get used to them while connected to the system console, anything important you update on the system will trigger such alerts.  </p>

<p>Now, at the UAF prompt, type &#8216;exit&#8217;. UAF will inform you that the User Authorisation file and rights database have been modified:</p>

<pre><code>UAF&#62; exit
%UAF-I-DONEMSG, system authorization file modified
%UAF-I-RDBDONEMSG, rights database modified
</code></pre>

<p>Great! Now you have a &#8216;normal&#8217; user you can login as, and gain full privs if you need them! Well, not quite. We need to manually create the user&#8217;s directory and set the correct permissions:</p>

<pre><code>$ create&#47;dir dua1:[int16h]
$ set directory&#47;owner=int16h dua1:[int16h]
</code></pre>

<p>Here you can see that we use the <strong>create</strong> command to create our new directory, then <strong>set</strong> to set the owner of the directory. DCL is quite flexible and efficient, most of the time you can turn a few commands into one longer command.</p>

<pre><code>$ create&#47;dir dua1:[int16h]&#47;owner=[int16h]
</code></pre>

<p>As you can see, DCL commands are quite logical and natural - it&#8217;s just getting used to them which can be a problem when you usually spend your time in a UNIX shell.  </p>

<p>Now that we have added our user, and created a home-directory for it - you can logout and try to login with those credentials. Use &#8220;lo&#8221; (or &#8220;logout&#8221;) to log out of the system.</p>

<pre><code>$ logout
  SYSTEM       logged out at  9-JAN-2009 23:43:01.47

 Welcome to OpenVMS (TM) VAX Operating System, Version V7.3    

Username: int16h
Password: 
 Welcome to OpenVMS (TM) VAX Operating System, Version V7.3

Your password has expired; you must set a new password to log in

New password: 
Verification: 
</code></pre>

<p>As we are still using the system console, you will be notified of a &#8220;System UAF record modification&#8221; security event because we changed the password of a user.  </p>

<p>Now that we&#8217;re logged in, we want to enable our full system privileges. This is done by running &#8220;<strong>set proc&#47;priv=all</strong>&#8221;. This is like running &#8220;su&#8221; on a UNIX-like system, except that we will still be the same user - just with &#8220;superuser&#8221; powers.</p>

<pre><code>$ set proc&#47;priv=all
</code></pre>

<p><a href="http://www.wherry.com/">Phil Wherry</a> was a great help with the following, as before reading his tips - I had never installed OpenVMS and additional components from scratch, only used existing systems. We are going to be installing the OpenVMS TCP&#47;IP stack+programs, this will require us to modify resource allocations within the system. We need to edit <strong>modparams.dat</strong> in <strong>sys$system</strong>:</p>

<pre><code>$ set def sys$system
$ edit modparams.dat
</code></pre>

<p>The following lines should be added to the end of the file, save+exit by pressing CTRL-Z:</p>

<pre><code>ADD_GBLPAGES=10000
ADD_GBLSECTIONS=100
ADD_NPAGEDYN=800000
ADD_NPAGEVIR=800000
MIN_SPTREQ=6000
</code></pre>

<p>Now, these changes to the system won&#8217;t take affect straight away. You may remember earlier on that the OpenVMS Installation ran &#8220;AUTOGEN&#8221; to update the system. We will now run it manually:</p>

<pre><code>$ set def sys$update
$ @autogen getdata reboot nofeedback

%AUTOGEN-I-BEGIN, GETDATA phase is beginning.
%AUTOGEN-I-NEWFILE, A new version of SYS$SYSTEM:PARAMS.DAT has been created.
        You may wish to purge this file.
%AUTOGEN-I-END, GETDATA phase has successfully completed.
%AUTOGEN-I-BEGIN, GENPARAMS phase is beginning.
%AUTOGEN-I-NEWFILE, A new version of SYS$MANAGER:VMSIMAGES.DAT has been created.
        You may wish to purge this file.

~~
</code></pre>

<p>After many more messages, the system will shutdown and you will be back at the SIMH prompt. &#8220;<strong>boot cpu</strong>&#8221; then &#8220;<strong>boot dua0</strong>&#8221; again. To bring up the system again. Finally, login with your user-account and &#8220;<strong>set proc&#47;priv=all</strong>&#8221;. We will then set some additional system parameters and shutdown the system again. As Phil said, these two processes could be done with only 1 reboot - but it&#8217;s more clear this way and will help remind you that a reboot &#47;is&#47; required after such alterations to the system.</p>

<pre><code>$ set proc&#47;priv=all
$ r sys$system:sysgen
SYSGEN&#62;  SET INTSTKPAGES 20
SYSGEN&#62;  WRITE CURRENT
SYSGEN&#62;  EXIT
$ @sys$system:shutdown
</code></pre>

<p>Bring up the system again, and login.  </p>

<p><strong>Installing the OpenVMS TCP&#47;IP Stack+Programs</strong>  </p>

<p>Multiuser operating systems these days are mostly useless without a TCP&#47;IP stack, and a way for remote users to login. Now we will install the PAK for TCP&#47;IP and install it.</p>

<pre><code>$ set proc&#47;priv=all
$ mount&#47;over=id dua3:
MOUNT-I-WRITELOCK, volume is write locked
%MOUNT-I-MOUNTED, VAXVMS073 mounted on _CGXVAX$DUA3:
$ set def dua3:[tcpip_vax051.kit]
</code></pre>

<p>Traditionally, CD-ROMs are mounted by specifying the device and volume-ID. Providing the &#8220;&#47;over=id&#8221; parameter instructs mount to mount the volume, ignoring the name of the volume. If you now execute &#8220;DIR&#8221; (&#8220;DIRECTORY&#8221;), you can see the contents of ua3:[tcpip_vax051.kit]:</p>

<pre><code>$ dir
Directory DUA3:[TCPIP_VAX051.KIT]

DEC-VAXVMS-TCPIP-V0501-15-1.PCSI;1      

Total of 1 file.
</code></pre>

<p>As you can see, there is 1 file in this directory and it has a .PCSI extension. This is handled by the POLYCENTER Software Installation Utility. OpenVMS applications generally come in 1 of 3 kit formats:</p>

<ul>
<li>  <strong>PCSI</strong> - These are installed with the &#8220;product install&#8221; command</li>
<li>  <strong>VMSINSTAL</strong> - These are 1 or more files with a sequential extension beginning with .A</li>
<li>  <strong>Self-Extracting</strong> - The extension can vary, usually something like SFX<em>AXPEXE, SFX</em>I64EXE or SFX_VAXEXE</li>
</ul>

<p>Anyway, to get back to our installation - we first need to install the <strong>UCX</strong> PAK. Refer to your OpenVMS Hobbyist e-mail with your licenses and paste it in:</p>

<pre><code>$ $ LICENSE REGISTER UCX -
_$ &#47;ISSUER=OPENVMS_HOBBYIST -
_$ &#47;AUTHORIZATION=DECUS-XXX-#########-####### -
_$ &#47;PRODUCER=DEC -
_$ &#47;UNITS=0 -
_$ &#47;TERMINATION_DATE=##-XXX-####  -
_$ &#47;ACTIVITY=CONSTANT=100 -
_$ &#47;CHECKSUM=#-XXXX-XXXX-XXXX-XXXX

$ license load UCX
%LICENSE-I-LOADED, DEC UCX was successfully loaded with 0 units
</code></pre>

<p>Proceed to install the kit by issuing: &#8220;**product install ***&#8221; this will scan the current directory for all packages to install - as there is only one, we don&#8217;t need to select which we want and don&#8217;t want:</p>

<pre><code>$ product install *

The following product has been selected:
    DEC VAXVMS TCPIP V5.1-15               Layered Product

Do you want to continue? [YES] YES

When prompted, go for the default options.

The following product will be installed to destination:
    DEC VAXVMS TCPIP V5.1-15               DISK$OVMSVAXSYS:[VMS$COMMON.]

Portion done: 0% ~
%PCSI-I-PRCOUTPUT, output from subprocess follows ...
% - HELP has been updated. You may purge SYS$COMMON:[SYSHLP]HELPLIB.HLB 
% 
%PCSI-I-PRCOUTPUT, output from subprocess follows ...
% TCPIP-W-PCSI_INSTALL 
% - Execute SYS$MANAGER:TCPIP$CONFIG.COM to proceed with configuration of
%   Compaq TCP&#47;IP Services.
% 
Portion done: 100%

The following product has been installed:
    DEC VAXVMS TCPIP V5.1-15               Layered Product

DEC VAXVMS TCPIP V5.1-15: Compaq TCP&#47;IP Services for OpenVMS.
</code></pre>

<p>Excellent. We now have TCP&#47;IP Services installed as well as a PAK loaded so we can actually use it (remember how I mentioned limitations if you didn&#8217;t have licenses earlier?).  </p>

<p>As recommended by the installation, we will run </p>

<pre><code>SYS$MANGER:TCPIP$CONFIG.COM
</code></pre>

<p>to configure TCP&#47;IP on our system.</p>

<pre><code>$ @sys$manager:tcpip$config

TCP&#47;IP Network Configuration Procedure

This procedure helps you define the parameters required
to run Compaq TCP&#47;IP Services for OpenVMS on this system. 

*CLS*

Compaq TCP&#47;IP Services for OpenVMS Configuration Menu

    Configuration options:

         1  -  Core environment
         2  -  Client components   
         3  -  Server components   
         4  -  Optional components

         5  -  Shutdown Compaq TCP&#47;IP Services for OpenVMS
         6  -  Startup Compaq TCP&#47;IP Services for OpenVMS
         7  -  Run tests

         A  -  Configure options 1 - 4
        [E] -  Exit configuration procedure

Enter configuration option: 
</code></pre>

<p>We start by configuring the core environment. I won&#8217;t paste all menus here, just the prompts to save space.</p>

<pre><code>Enter configuration option: 1

    DOMAIN Configuration

    Enter Internet domain: cgx.org.uk

Enter configuration option: 2

    QE0 is the Ethernet device XQA0:

    QE0 has not been configured

    Compaq TCP&#47;IP Services for OpenVMS Interface QE0 Configuration Menu

    Configuration options:

         1  -  Configure interface manually       
         2  -  Let DHCP configure interface       

        [E] -  Exit menu (Do not configure interface QE0)

Enter configuration option: 1
Enter fully qualified host name: cgxvax.cgx.org.uk
Enter Internet address for cgxvax: 10.0.0.200
Enter Internet network mask for cgxvax [255.0.0.0]: [enter]
Enter broadcast mask for cgxvax [10.255.255.255]: [enter]
* Is the above correct [YES]: YES
</code></pre>

<p>We have now set the domain for our system, as well as manually configured the ethernet interface manually. You can configure this as you please of course.  </p>

<p>Next we&#8217;ll configure basic routing. At the moment, we wouldn&#8217;t really want to use our system as a router, though the Compaq TCP&#47;IP services does support a variety of protocols.</p>

<pre><code>* Do you want to configure dynamic ROUTED or GATED routing [NO]: NO

    A default route has not been configured.
* Do you want to configure a default route [YES]: YES
Enter your Default Gateway host name or address: 10.0.0.1

    10.0.0.1 is not in the local host database.
    If you want to enter the default gateway in the local host
    database, enter its host name. Otherwise, enter .

Enter the Default Gateway host name []: [ENTER]

Next, to resolve hostnames we will need to specify a nameserver.

Enter configuration option: 4
Enter your BIND server name: 10.0.0.1
Enter remote BIND server name []: [enter]
Enter next BIND server name: [enter]

Enter configuration option: E

Now that the core configuration is complete, we can enable telnet:

Enter configuration option: 2
Enter configuration option: 6
TELNET Configuration

Service is not defined in the TCPIP$SERVICE database.
Service is not enabled.
Service is stopped.

    TELNET configuration options:

         1 - Enable service on this node

        [E] - Exit TELNET configuration

Enter configuration option: 1
Creating TELNET Service entry
</code></pre>

<p>You should enable FTP from the client menu also, then exit to the main menu. Once at the main menu, chose option #6 to startup TCP&#47;IP services.</p>

<pre><code>6 - Startup Compaq TCP&#47;IP Services for OpenVMS

Begin Startup...

%TCPIP-I-INFO, TCP&#47;IP Services startup beginning at 10-JAN-2009 01:30:04.47
%TCPIP-I-INFO, creating UCX compatibility file SYS$COMMON:[SYSEXE]UCX$SERVICE.DAT
%TCPIP-I-NORMAL, timezone information verified
</code></pre>

<p>More messages will follow, you will then be prompted to &#8220;Press Resturn to continue&#8221;. Finally exit, and press &#8216;Y&#8217; when prompted to start your services (if not already started). You should now be able to connect to your system using telnet and FTP (though, not from the host system! This is a flaw in winpcap&#47;libpcap not in OpenVMS or SIMH).  </p>

<p>Finally, add </p>

<blockquote>
<p><code>$ @sys$startup:tcpip$startup</code></p>
</blockquote>

<p>to the &#8216;<strong>sys$manager:systartup_vms.com</strong>&#8217; file to enable TCP&#47;IP services to run at boot-time.  </p>

<p>Stay tuned for part 2, where we will learn more about OpenVMS, DCL and installing more software including 3rd-party products from <a href="http://www.process.com/">Process Software</a> as well as useful tools you&#8217;re familiar with such as <a href="http://www.gnu.org/software/wget/">wget</a>.  </p>

<p><strong>References and Links</strong></p>

<ul>
<li>  <a href="http://en.wikipedia.org/">http:&#47;&#47;en.wikipedia.org</a></li>
<li>  <a href="http://simh.trailing-edge.com/">http:&#47;&#47;simh.trailing-edge.com</a></li>
<li>  <a href="http://www.openvmshobbyist.com/">http:&#47;&#47;www.openvmshobbyist.com</a></li>
<li>  <a href="http://connect-community.de/">http:&#47;&#47;connect-community.de</a></li>
<li>  <a href="http://www.wherry.com/">http:&#47;&#47;www.wherry.com</a></li>
<li>  <a href="https://web.archive.org/web/20090312034321/http://64.223.189.234/">http:&#47;&#47;64.223.189.234</a>  (HoffmanLabs)</li>
</ul>

]]></description>
</item>

<item>
<guid>/shellcoding_on_freebsd.html</guid>
<link>/shellcoding_on_freebsd.html</link>
<pubDate>Tue, 01 Jun 2004 00:00:00 +0100</pubDate>
<title></title>
<description><![CDATA[

<h4 id="OpenVMS%20and%20SIMH%20-%20Part%201">OpenVMS and SIMH - Part 1</h4>

<p>Running OpenVMS on the SIMH VAX simulator</p>

<p><a href="http://en.wikipedia.org/wiki/OpenVMS">OpenVMS</a>  is an operating system originally developed by  <a href="http://en.wikipedia.org/wiki/Digital_Equipment_Corporation">DEC</a>  (Digital Equipment Corporation), a company acquired by  <a href="http://en.wikipedia.org/wiki/Compaq">Compaq</a>  which was then acquired by  <a href="http://en.wikipedia.org/wiki/Hewlett-Packard">HP</a>  for the  <a href="http://en.wikipedia.org/wiki/VAX">VAX</a>  platform.  </p>

<p>Although development started in the mid-1970s into the 1980s, OpenVMS is still very much alive with up-to version 7.3 available for VAX, and continued development in 8.x for  <a href="http://en.wikipedia.org/wiki/DEC_Alpha">DEC Alpha</a>  and now Intel  <a href="http://en.wikipedia.org/wiki/Itanium">Itanium</a>  architectures. Even Oracle, who acquired DEC&#8217;s  <a href="http://en.wikipedia.org/wiki/Oracle_Rdb">Rdb</a>  RDBMS have  <a href="http://www.oracle.com/technology/products/rdb/htdocs/rdb7/rdb_statement_of_direction.html">stated</a>  that they will continue to support and develop Rdb, creating a lesser gap between it and Oracle Database systems.  </p>

<p><a href="http://en.wikipedia.org/wiki/SIMH">SIMH</a>  is a set of emulators for various systems and is developed by Bob Supnik, who is a former engineer for DEC. One of the systems it is able to emulate is the VAX. This is what we&#8217;re interested in. An excellent feature of SIMH (among many) is that it supports networking (albeit experimental support; I&#8217;ve had no problems so far).  </p>

<p>If you are unable to install OpenVMS, consider looking at  <del><a href="http://deathrow.vistech.net/">http:&#47;&#47;deathrow.vistech.net</a>  (Beave&#8217;s former OpenVMS cluster)</del> <a href="http://www.polarhome.com/">PolarHome</a> where you can get a taste of OpenVMS without installation.  </p>

<p>So, we&#8217;re going to install OpenVMS within SIMH&#8217;s VAX emulator. There are a few prerequisites, some of which may be difficult to meet:</p>

<ul>
<li>  <a href="http://simh.trailing-edge.com/">SIMH w&#47; Networking</a>  (  <a href="http://simh.trailing-edge.com/sources/simhv38-0-exe-ether.zip">win32</a>  &#47;  <a href="http://macappstore.org/simh/">macOS</a>)</li>
<li>  <a href="http://www.winpcap.org/">WinPcap</a>  (for win32 SIMH networking)</li>
<li>  A  <a href="http://en.wikipedia.org/wiki/DECUS">HP User Society (Formerly DECUS)</a>  membership (hint:  <a href="https://www.connect-community.de/Membership/application">Connect Deutschland</a>  has no fee for basic membership. Site is in German)</li>
<li> <a href="https://www.hpe.com/h41268/live/index_e.aspx?qid=24548">HPE OpenVMS Hobbyist Registration</a>  (For your license PAKs)</li>
<li>  <a href="http://mirrors.pdp-11.ru/_vax__/_VMS/_distrib/7.X/">OpenVMS 7.3 VAX Media</a></li>
</ul>

<p>DECUS membership is required to be able to register licenses for your hobbyist system. Some chapters may issue your membership number straight away online, others will send you a membership card in the post.</p>

<p>When HPE exit the OpenVMS game and VSI fully take over, there is no guarantee that the hobbyist program will be continued, though I heard from Hari at HPE that they are interested in fostering the program for their own VMS version.</p>

<p><strong>!!! Mac OS X Note !!!</strong>  </p>

<p>The binaries linked to in the prerequisites may fail on your system.<br/>
On Mac OS X 10.5.5 (Intel) they caused problems for me, so you should  install Apple Xcode and compile from source. Follow <a href="https://web.archive.org/web/20090312034321/http://64.223.189.234/node/922">this guide</a> if using GCC 4.x.  </p>

<p><strong>!!!</strong>  </p>

<p><strong>Getting Ready</strong>  </p>

<p>I&#8217;ll assume that you have already received the OpenVMS VAX and additional license paks via E-mail. The licenses aren&#8217;t required to install OpenVMS - but without them you will have a very limited installation.  </p>

<p>Start off by creating a directory somewhere, be this <em>~&#47;OpenVMS</em>, <em>C:\OpenVMS</em>, <em>&#47;Users&#47;int16h&#47;OpenVMS</em> or wherever you please. Copy the VAX emulator from SIMH to this directory, as well as <strong>ka655.bin</strong>. If you have an ISO image of the installation media, copy those there too (I will be using an ISO for this tutorial).  </p>

<p><strong>Configuring SIMH::VAX</strong>  </p>

<p>SIMH needs to know how much RAM and other virtual hardware you will be attaching. Although you could do this from the SIMH prompt, it&#8217;s not very practical so we will create a config file named <strong>openvms.ini</strong>. Below is a commented config which will suit our needs, but you will need to customize it for your own use.</p>

<pre><code>; Load CPU microcode
load -r ka655.bin
;
; Set memory allocation to 64M
set cpu 64m
;
; We will have 2 DEC RA92 disk drives, about 1.5G capacity.
set rq0 ra92
set rq1 ra92
;
; rq3 will be a CD-ROM drive
set rq3 cdrom
;
; Attach the devices to files, these will be our virtual disks
attach rq0 d0.dsk
attach rq1 d1.dsk
;
; Attach the CD-ROM drive to our installation media ISO (use &#39;dd&#39; ;)
attach -r rq3 OpenVMS73.iso
;
; We don&#39;t need rl and ts devices, so we can disable them.
;
set rl disable
set ts disable
;
; Attach Ethernet to a network interface. This will work in &#39;bridged&#39;
; mode. Make sure to define a fake MAC address if using Windows.
; Unlike Linux, *BSD etc Windows does not have a nice, logical alias
; for network interfaces.
;
; Windows Example:
;set xq mac=08-00-2B-AA-BB-CC
;attach xq \Device\NPF_{9622ACD6-7383-4C42-B8F3-FBFA22573B71}
;
; Linux&#47;*BSD&#47;UNIX Example:
;attach xq eth0
;
; Mac OS X:
;attach xq en0
;
; Uncomment the following if you&#39;d prefer to telnet into SIMH
; from another machine rather than use the local console, 6969=port.
;
;set telnet 6969
;
;
; Boot the system:
;
boot cpu
</code></pre>

<p>Save this file, and make sure you&#8217;re in the directory you created in a terminal.  </p>

<p><strong>Installing OpenVMS</strong>  </p>

<pre><code>Run: **.&#47;vax openvms.ini**

sh-3.2# .&#47;vax openvms.ini 
VAX simulator V3.8-0
RQ: unit is read only
Eth: opened en0

KA655-B V5.3, VMB 2.7
Performing normal system tests.
40..39..38..37..36..35..34..33..32..31..30..29..28..27..26..25..
24..23..22..21..20..19..18..17..16..15..14..13..12..11..10..09..
08..07..06..05..04..03..
Tests completed.

&#62;&#62;&#62;
</code></pre>

<p>Good. The system has booted and is now awaiting further instructions. Those of you familiar with Sun SPARC hardware may recognise an initial firmware prompt like this. From here, we will boot our virtual CD-ROM with <strong>boot dua3</strong>.</p>

<pre><code>&#62;&#62;&#62;boot dua3
(BOOT&#47;R5:0 DUA3
  2..
-DUA3
  1..0..

%SYSBOOT-I-SYSBOOT Mapping the SYSDUMP.DMP on the System Disk
%SYSBOOT-W-SYSBOOT Can not map SYSDUMP.DMP on the System Disk
%SYSBOOT-W-SYSBOOT Can not map PAGEFILE.SYS on the System Disk
   OpenVMS (TM) VAX Version X7G7 Major version id = 1 Minor version id = 0
%WBM-I-WBMINFO Write Bitmap has successfully completed initialization.
PLEASE ENTER DATE AND TIME (DD-MMM-YYYY  HH:MM)  09-JAN-2009 20:11

OpenVMS installation will now probe your system for available devices. Once it has finished enumerating your devices, it will prompt you to enter "**YES**".

Configuring devices . . .
Now configuring HSC, RF, and MSCP-served devices . . .

Please check the names of the devices which have been configured,
to make sure that ALL remote devices which you intend to use have
been configured.

If any device does not show up, please take action now to make it
available.

Available device  DUA0:                            device type RA92
Available device  DUA1:                            device type RA92
Available device  DUA2:                            device type RD54
Available device  DUA3:                            device type RRD40
Available device  DYA0:                            device type RX02
Available device  DYA1:                            device type RX02
Available device  MUA0:                            device type TK50
Available device  MUA1:                            device type TK50
Available device  MUA2:                            device type TK50
Available device  MUA3:                            device type TK50

Enter "YES" when all needed devices are available:  YES
%BACKUP-I-IDENT, Stand-alone BACKUP T7.2; the date is  9-JAN-2009 20:15:24.42
</code></pre>

<p>You will now be dropped at what looks like a shell-prompt. OpenVMS and OpenVMS components are generally installed by extracting backup archives. This of course comes from the days when tape drives were more common. Let&#8217;s extract the backup saveset to our first drive with &#8220;<strong>backup dua3:vms073.b&#47;save_set dua0:</strong>&#8221;:</p>

<pre><code>$ backup dua3:vms073.b&#47;save_set dua0:

%BACKUP-I-PROCDONE, operation completed.  Processing finished at  9-JAN-2009 20:20:00.82
If you do not want to perform another standalone BACKUP operation,
use the console to halt the system.

If you do want to perform another standalone BACKUP operation, 
ensure the standalone application volume is online and ready.
Enter "YES" to continue: 
</code></pre>

<p>This will take a short time, and you won&#8217;t be informed until it is complete. We are finished with this for now, so you may press CTRL-E to halt our system and drop you at the SIMH prompt. Now we boot the system again with &#8220;<strong>boot cpu</strong>&#8221;:</p>

<pre><code>Simulation stopped, PC: 839ABD46 (BEQL 839ABDB4)
sim&#62; boot cpu

KA655-B V5.3, VMB 2.7
Performing normal system tests.
40..39..38..37..36..35..34..33..32..31..30..29..28..27..26..25..
24..23..22..21..20..19..18..17..16..15..14..13..12..11..10..09..
08..07..06..05..04..03..
Tests completed.
</code></pre>

<p>Great. Now this time, instead of booting <strong>dua3</strong>, we will boot our first virtual hard disk where we just installed the backup to - <strong>dua0</strong>:</p>

<pre><code>&#62;&#62;&#62;set boot dua0
&#62;&#62;&#62;boot
(BOOT&#47;R5:0 DUA0

  2..
-DUA0
  1..0..

%SYSBOOT-I-SYSBOOT Mapping the SYSDUMP.DMP on the System Disk
%SYSBOOT-W-SYSBOOT Can not map SYSDUMP.DMP on the System Disk
%SYSBOOT-I-SYSBOOT Mapping PAGEFILE.SYS on the System Disk
%SYSBOOT-I-SYSBOOT SAVEDUMP parameter not set to protect the PAGEFILE.SYS
   OpenVMS (TM) VAX Version BI73-7G7 Major version id = 1 Minor version id = 0
%WBM-I-WBMINFO Write Bitmap has successfully completed initialization.

           OpenVMS VAX V7.3 Installation Procedure

                 Model: VAXserver 3900 Series
                 System device: RA92 - _DUA0:
                   Free Blocks: 2854566
                      CPU type: 10-01

* Please enter the date and time (DD-MMM-YYYY HH:MM) 09-JAN-2009 20:36
</code></pre>

<p>As you can see, we are now entering the real OpenVMS installation and it reports that we are using a VAXServer 3900, the system disk is a DEC RA92 and we have 2854566 blocks free. Enter the current date+time, then hit enter.  </p>

<p>You&#8217;ll see quite a few messages scrolling up the screen, one which may seem quite alarming is:</p>

<pre><code>%%%%%%%%%%%  OPCOM   9-JAN-2009 20:36:08.92  %%%%%%%%%%%
Message from user SYSTEM
%LICENSE-E-NOAUTH, DEC VAX-VMS use is not authorized on this node
-LICENSE-F-NOLICENSE, no license is active for this software product
-LICENSE-I-SYSMGR, please see your system manager
</code></pre>

<p>During the install, we will enter our license for DEC VAX-VMS; So just ignore this for now. Let&#8217;s continue:</p>

<p>If this system disk is to be used in an OpenVMS Cluster with multiple system disks, then each system disk must have a unique volume label. Any nodes having system disks with duplicate volume labels will fail to boot into the cluster.</p>

<pre><code>   You can indicate a volume 
   label of 1 to 12 characters in length.
   If you want to use the default name of
   OVMSVAXSYS, press RETURN in response to
   the next question.

* Enter the volume label for this system disk [OVMSVAXSYS]: 
</code></pre>

<p>For this tutorial, I won&#8217;t cover setting up a cluster so just leave the default.</p>

<pre><code>* Enter name of drive holding the OpenVMS distribution media: DUA3
* Is the OpenVMS media ready to be mounted? [N] Y
%MOUNT-I-MOUNTED, VAXVMS073 mounted on _DUA3:

   Select optional software you want to install.  You can install one
   or more of the following OpenVMS or DECwindows components:

    o OpenVMS library                              -  52200 blocks
    o OpenVMS optional                             -  19000 blocks
    o OpenVMS Help Message                         -  10400 blocks
    o OpenVMS Management Station                   -  20000 blocks
    o DECwindows base support                      -   4400 blocks
    o DECwindows workstation support               -  23800 blocks
          -  75 dots per inch video fonts          -    (included)
          - 100 dots per inch video fonts          -   6200 blocks
    o DECnet-Plus networking                       -  80000 blocks
    o DECnet Phase IV networking                   -    800 blocks

        Space remaining on system disk:  2854377 blocks
</code></pre>

<p>You can go ahead and install everything if you have space, I imagine you will want to see everything OpenVMS has to offer at some point - so it&#8217;s best to install these sets now rather than later.</p>

<pre><code>* Do you want to install the OpenVMS library files? (Y&#47;N) Y

    Space remaining on system disk:  2802177 blocks

* Do you want to install the OpenVMS optional files? (Y&#47;N) Y

    Space remaining on system disk:  2783177 blocks

~~

* Do you want to install the MSGHLP database? (Y&#47;N) Y

~~ 

* Where do you want to install the MSGHLP database?
    [SYS$COMMON:[SYSHLP]] [ENTER]

~~

* Do you want to install the optional OpenVMS Management Station files? (Y&#47;N) Y

~~

* Do you want the DECwindows base support? (Y&#47;N) Y

~~

* Do you want to install DECwindows workstation support? (Y&#47;N) Y

~~

* Do you want 100 dots per inch video fonts installed? (Y&#47;N) Y

~~

* Do you want to install DECnet-Plus? (Y&#47;N) Y

~~

    The following options will be provided:

        OpenVMS library
        OpenVMS optional
        OpenVMS Help Message
        OpenVMS Management Station Software -- PC files
        DECwindows base support
        DECwindows workstation support with:
            -  75 dots per inch video fonts
            - 100 dots per inch video fonts
        DECnet-Plus

    Space remaining on system disk:  2638377 blocks

* Is this correct? (Y&#47;N) Y
</code></pre>

<p>Phew! Now, at last - the backup save sets will be extracted&#47;restored. This will take some time, enough for a cigarette at least. When it completes, you&#8217;ll be presented with some useful information regarding OpenVMS Clusters:</p>

<pre><code>In an OpenVMS Cluster, you can run multiple systems sharing all files
   except PAGEFILE.SYS, SWAPFILE.SYS, SYSDUMP.DMP, and VAXVMSSYS.PAR.

   Cluster configuration cannot be done at this time because no network
   is present.  In order to configure a cluster you must FIRST do one
   or both of the following:

   o Install DECnet-Plus (or DECnet Phase IV), or
   o Execute SYS$STARTUP:LAN$STARTUP.COM by removing the
      comment delimiter ("!") from the line

          $! @SYS$STARTUP:LAN$STARTUP

     in SYS$MANAGER:SYSTARTUP_VMS.COM.

   Then configure the cluster by executing the following command:

             @ @SYS$MANAGER:CLUSTER_CONFIG

   See the OpenVMS System Manager&#39;s Manual: Essentials for more information.
</code></pre>

<p>For future reference, you should keep a copy of such messages for future configuration of components.</p>

<pre><code>    * Do you want DECwindows Motif as the default windowing system? (Y&#47;N) Y

   Now we will ask you for new passwords for the following accounts:

        SYSTEM, SYSTEST, FIELD

   Passwords must be a minimum of 8 characters in length.  All passwords
   will be checked and verified.  Any passwords that can be guessed easily
   will not be accepted.
</code></pre>

<p>Now, this is the equivalent of setting your root password on a UNIX-like Operating System. Make sure to set a decent password for SYSTEM and different passwords for SYSTESY and FIELD. You could make them all the same if you&#8217;re not planning on allowing anyone else to access your new OpenVMS system.</p>

<pre><code>* Enter password for SYSTEM: 
* Re-enter for verification: 
%UAF-I-MDFYMSG, user record(s) updated
%VMS-I-PWD_OKAY, account password for SYSTEM verified
</code></pre>

<p>You&#8217;ll see similar messages for the remaining accounts.</p>

<pre><code>Creating RIGHTS database file, SYS$SYSTEM:RIGHTSLIST.DAT
Ignore any "-SYSTEM-F-DUPIDENT, duplicate identifier" errors.

%UAF-I-RDBCREMSG, rights database created
%UAF-I-RDBADDMSGU, identifier DEFAULT value [000200,000200] added to rights database
%UAF-I-RDBADDMSGU, identifier FIELD value [000001,000010] added to rights database
%UAF-I-RDBADDMSGU, identifier SYSTEM value [000001,000004] added to rights database
%UAF-I-RDBADDMSGU, identifier SYSTEST value [000001,000007] added to rights database
%UAF-E-RDBADDERRU, unable to add SYSTEST_CLIG value [000001,000007] to rights database
-SYSTEM-F-DUPIDENT, duplicate identifier
%UAF-I-NOMODS, no modifications made to system authorization file
%UAF-I-RDBDONEMSG, rights database modified

Creating MODPARAMS.DAT database file, SYS$SYSTEM:MODPARAMS.DAT
</code></pre>

<p>These UAF messages confirm that the rights database has been created, and the system users have been added. We will use the UAF (User Authorization File) tool later to add a normal user.  </p>

<p>Next you&#8217;ll be prompted for the SCSNODE name and SCSSYSTEMID for your VMS node, as this is your first installation and not part of a cluster - enter what you like (within reason, the SCSSYSTEMID should be between 1025 and 65535).</p>

<pre><code>* Please enter the SCSNODE name: CGXVAX

* Please enter the SCSSYSTEMID:  1025
</code></pre>

<p>Now you should have your OpenVMS licenses&#47;PAKs (Product Authorization Keys) ready.</p>

<p>Continuing with OpenVMS VAX V7.3 Installation Procedure.</p>

<pre><code>    Configuring all devices on the system ...

    If you have Product Authorization Keys (PAKs) to register, you can
    register them now.

* Do you want to register any Product Authorization Keys? (Y&#47;N): Y

    VMS License Management Utility Options:

        1. REGISTER a Product Authorization Key
~~

Enter one of the above choices [1]: 1
Do you have your Product Authorization Key? [YES]: YES

Find your PAK for "VAX-VMS". This PAK will be entered manually by extracting the information from each field and entering them when prompted... For future PAKs, you may copy-paste the command straight from your e-mail.


Here is a list of the license information just entered:

                     Issuer:  OPENVMS_HOBBYIST
              Authorization:  DECUS-XXX-#########-#######
               Product Name:  VAX-VMS
                   Producer:  DEC
                      Units:  0
               Release Date:  
                    Version:  
           Termination Date:  ##-XXX-####
               Availability:  
                   Activity:  A
                    Options:  NO_SHARE
                      Token:  
                Hardware ID:  
                   Checksum:  #-XXXX-XXXX-XXXX-XXXX

Is that correct? [YES]:YES
Registering VAX-VMS license in SYS$COMMON:[SYSEXE]LMF$LICENSE.LDB...

Do you want to LOAD this license on this system? [YES]:
%LICENSE-I-LOADED, DEC VAX-VMS was successfully loaded with 0 units

You may enter some other PAKs now, or wait until later. I will install others later. Enter &#39;99 [enter]&#39; to exit the license management utility.

********************************************************************************

    After the system has rebooted you should register any additional
    Product Authorization Keys (PAKs) you have, or receive in the
    future, by executing the following procedure:

        $ @SYS$UPDATE:VMSLICENSE

    See the OpenVMS License Management Utility Manual for any additional
    information you need.

********************************************************************************
</code></pre>

<p>Another piece of useful information to remember for later. Now, you&#8217;ll be prompted to set your time zone. Follow the prompts until you&#8217;re asked to provide information about DECnet-Plus, then respond as follows:</p>

<pre><code>* Enter name of drive holding the DECnet-Plus kit: DUA3
* Is DUA3: ready to be mounted? [N] y

The following product has been selected:
    DEC VAXVMS DECNET_OSI V7.3             Layered Product

~~

This product requires one of two PAKs: DVNETEND or DVNETRTG.

Do you want the defaults for all options? [YES] YES
</code></pre>

<p>This set isn&#8217;t required, but as we had had chosen to install everything earlier - we may as well. Installation will run for a few minutes, then OpenVMS Installation will run AUTOGEN to update the system. This will take a couple of minutes, then the system will be rebooted - dropping you back at the SIMH prompt. Start the system back up:</p>

<pre><code>sim&#62; boot cpu

KA655-B V5.3, VMB 2.7
Performing normal system tests.
40..39..38..37..36..35..34..33..32..31..30..29..28..27..26..25..
24..23..22..21..20..19..18..17..16..15..14..13..12..11..10..09..
08..07..06..05..04..03..
Tests completed.

&#62;&#62;&#62;boot
(BOOT&#47;R5:0 DUA0

Soon you will see:

*****************************************************************

OpenVMS VAX V7.3

You have SUCCESSFULLY installed the OpenVMS VAX Operating System.

The system is now executing the STARTUP procedure.  Please
wait for the completion of STARTUP before logging in to the
system.

*****************************************************************

%STDRV-I-STARTUP, OpenVMS startup begun at  9-JAN-2009 21:56:36.10

~~~

%SET-I-INTSET, login interactive limit = 64, current interactive value = 0
  SYSTEM       job terminated at  9-JAN-2009 21:57:04.05

  Accounting information:
  Buffered I&#47;O count:            1621         Peak working set size:    1624
  Direct I&#47;O count:               613         Peak page file size:      5504
  Page faults:                   5578         Mounted volumes:             0
  Charged CPU time:           0 00:00:24.99   Elapsed time:     0 00:00:31.61
</code></pre>

<p>Congratulations! You have installed OpenVMS 7.3 \o&#47;. Now after all those pages of instructions and console-pastes, we&#8217;ll proceed to configure OpenVMS a little bit.  </p>

<p><strong>Configuring OpenVMS</strong>  </p>

<p>So, you are now presented with some information about your new system. Where do you go from here? Press <strong>enter</strong> and you&#8217;ll see a welcome-banner followed by a prompt for you to login. Enter &#8216;<strong>SYSTEM</strong>&#8217; as the username, and the password you set during installation.</p>

<pre><code>Username: SYSTEM
Password: 
 Welcome to OpenVMS (TM) VAX Operating System, Version V7.3
$ 
</code></pre>

<p>At this point, I can see all you UNIX-like OS users gagging to explore the system and run commands such as &#8216;uptime&#8217; and &#8216;uname -a&#8217; to show off to all your friends. Well, I&#8217;m extremely sorry to disappoint you (and perhaps wasted your time so far!) but OpenVMS is not UNIX or in fact similar to any derivatives in any way. You can throw any hopes of POSIX compatibility out the window, too (well, there <em>is</em> a POSIX compatibility interface&#47;set for OpenVMS but we won&#8217;t go into that ;).  </p>

<p>To satisfy the needs of your e-penis, you may run &#8220;<strong>sh sys</strong>&#8221; or in its full form: &#8220;<strong>show system</strong>&#8221;. The &#8220;show&#8221; command is used to spit out a variety of information, many embedded devices such as routers have similar functions.</p>

<pre><code>$ sh sys
OpenVMS V7.3  on node CGXVAX   9-JAN-2009 22:17:25.96  Uptime  0 00:21:04
  Pid    Process Name    State  Pri      I&#47;O       CPU       Page flts  Pages
00000201 SWAPPER         HIB     16        0   0 00:00:00.21         0      0   
00000205 CONFIGURE       HIB      8        5   0 00:00:00.06       112    175   
00000206 LANACP          HIB     12       33   0 00:00:00.25       366    788   
00000208 IPCACP          HIB     10        6   0 00:00:00.03        99    177   
00000209 ERRFMT          HIB      8       44   0 00:00:00.14       153    234   
0000020B OPCOM           HIB      8       48   0 00:00:00.19       304    150   
0000020C AUDIT_SERVER    HIB     10      133   0 00:00:00.53       569    815   
0000020D JOB_CONTROL     HIB     10       30   0 00:00:00.12       191    342   
0000020E SECURITY_SERVER HIB     10       35   0 00:00:00.43       766   1349   
00000211 SYSTEM          CUR      7       97   0 00:00:00.62       869    498   
</code></pre>

<p>This isn&#8217;t too different from what you&#8217;d see in a screen-dump of the &#8216;top&#8217; command on UNIX-like systems.  </p>

<p>Now, let&#8217;s get back on track. OpenVMS uses <a href="http://en.wikipedia.org/wiki/DIGITAL_Command_Language">DCL (DIGITAL Command Language)</a>, a scripting language developed by DIGITAL for their Operating Systems. You may think of it as the OpenVMS equivalent of BASH in that it&#8217;s used as a &#8220;shell&#8221;&#47;CLI as well as a normal scripting language.  </p>

<p>So far, we have used DUA3 (our virtual CD-ROM drive) and DUA0 (Our first hard disk), now we will initialise DUA1, our second virtual hard disk. It is good practice to keep system files on one disk, and data on others. This is especially useful for when&#47;if you need to reinstall the Operating System, you can keep your users&#8217; data. Let&#8217;s initialise the disk now and mount it:</p>

<pre><code>$ initialize dua1: DATA
$ mount&#47;system dua1 data
%MOUNT-I-MOUNTED, DATA mounted on _CGXVAX$DUA1:
</code></pre>

<p><strong>n.B. Remember to have around another 1.5G of space free for this else bad things will happen. On initialisation of the new volume, the file d1.dsk grew to 719M</strong>  </p>

<p>This is what you don&#8217;t want to happen, else you&#8217;ll need to boot the system again:</p>

<pre><code>$ initialize dua1: DATA
RQ I&#47;O error: No space left on device
I&#47;O error, PC: 83430D36 (ASHL #1,R3,R0)
sim&#62; 
</code></pre>

<p>Now that we have a new disk initialised and mounted, we will edit the site-specific startup file &#8220;<strong>sys$manager:systartup_vms.com</strong>&#8221; and add the mount command above so we don&#8217;t have to manually mount the volume at each startup. We will need to let OpenVMS know that we are using a VT100-compatible terminal so we can use the full-screen VMS editor &#8220;edit&#8221; properly:</p>

<pre><code>$ set term&#47;vt100
$ edit sys$manager:systartup_vms.com
</code></pre>

<p>There&#8217;s no right or wrong place to put this command really, but I like to mount volumes just before DECnet is setup+started. A general rule is to mount any additional volumes first, before running any startup processes which may rely on the volume being available:</p>

<pre><code>$! To start a batch queue, remove the comment delimiter ($!) from the
$! following command line.
$!
$!$ START &#47;QUEUE SYS$BATCH
$!
$ mount&#47;system dua1: data
$!
$! In order to use asynchronous DECnet Phase IV on OpenVMS VAX systems only,
$! remove the comment delimiter ($!) from the next two lines.

Press CTRL-Z to save and quit &#39;EDIT&#39;.

409 lines written to file SYS$COMMON:[SYSMGR]SYSTARTUP_VMS.COM;2
$ 
</code></pre>

<p>You may be wondering why &#8220;;2&#8221; is appended to the filename. OpenVMS stores multiple revisions of files as they are updated&#47;edited. Some other operating systems and&#47;or filesystems work in this manner including Novell Netware. You shouldn&#8217;t have any problems with this, until you try and delete a file - OpenVMS will ask you to specify which revision you&#8217;d like to delete ;).  </p>

<p><strong>Adding Users</strong>  </p>

<p>As in UNIX-like systems, OpenVMS has user and group IDs, however, unlike UNIX - they are not entities you can reference separately. The UID and GID-like values are an exclusive singleton, which is called a UIC (User Identification Code), the format of a UIC is [###,###] - where the first part is the group, and the second is the user. By default, users added to the UAF are disabled. We will now add our first user, whose &#8216;home&#8217; directory is on our new disk, will have full system privileges and won&#8217;t be disabled:</p>

<pre><code>$ set def sys$system
$ r authorize
UAF&#62; add int16h&#47;password=t3mp123&#47;owner="int16h"&#47;dev=dua1&#47;dir=[int16h]&#47;uic=[200,201]&#47;flag=nodisuser&#47;priv=all
%UAF-I-ADDMSG, user record successfully added
~~
</code></pre>

<p><strong>set def</strong> - This is short for &#8220;set default&#8221;, which is the equivalent of the &#8220;cd&#8221; command on UNIX-like operating systems. Navigating around an OpenVMS system may take some getting used to, just think of it as the step after moving from DOS to UNIX. In this case:</p>

<blockquote>
<p>sys$system</p>
</blockquote>

<p>is an alias for </p>

<blockquote>
<p><strong>CGXVAX$DUA0:[SYS0.SYSCOMMON.][SYSEXE]</strong></p>
</blockquote>

<p><strong>r authorize</strong> - &#8220;r&#8221; is the shortened command for run. We need to be in the sys$system logical directory to run &#8216;authorize&#8217; as this is where SYSUAF.DAT is stored.  </p>

<p>So, basically we are adding the user &#8216;int16h&#8217;, with initial password of &#8216;t3mp123&#8217; (this will be changed at first-login), owner is the user&#8217;s real-name, dev is the device where the user&#8217;s initial&#47;home directory will reside, dir is the name of the directory on &#8216;dev&#8217;, uic is the user&#8217;s UIC (groupid,uid - default group is 200), we have added the nodisuser flag to ensure the account isn&#8217;t disabled, and finally we have given the uses all privileges on the system.  </p>

<p>After you run the &#8216;add&#8217; line at the UAF prompt, your screen will fill with security notices. You should get used to them while connected to the system console, anything important you update on the system will trigger such alerts.  </p>

<p>Now, at the UAF prompt, type &#8216;exit&#8217;. UAF will inform you that the User Authorisation file and rights database have been modified:</p>

<pre><code>UAF&#62; exit
%UAF-I-DONEMSG, system authorization file modified
%UAF-I-RDBDONEMSG, rights database modified
</code></pre>

<p>Great! Now you have a &#8216;normal&#8217; user you can login as, and gain full privs if you need them! Well, not quite. We need to manually create the user&#8217;s directory and set the correct permissions:</p>

<pre><code>$ create&#47;dir dua1:[int16h]
$ set directory&#47;owner=int16h dua1:[int16h]
</code></pre>

<p>Here you can see that we use the <strong>create</strong> command to create our new directory, then <strong>set</strong> to set the owner of the directory. DCL is quite flexible and efficient, most of the time you can turn a few commands into one longer command.</p>

<pre><code>$ create&#47;dir dua1:[int16h]&#47;owner=[int16h]
</code></pre>

<p>As you can see, DCL commands are quite logical and natural - it&#8217;s just getting used to them which can be a problem when you usually spend your time in a UNIX shell.  </p>

<p>Now that we have added our user, and created a home-directory for it - you can logout and try to login with those credentials. Use &#8220;lo&#8221; (or &#8220;logout&#8221;) to log out of the system.</p>

<pre><code>$ logout
  SYSTEM       logged out at  9-JAN-2009 23:43:01.47

 Welcome to OpenVMS (TM) VAX Operating System, Version V7.3    

Username: int16h
Password: 
 Welcome to OpenVMS (TM) VAX Operating System, Version V7.3

Your password has expired; you must set a new password to log in

New password: 
Verification: 
</code></pre>

<p>As we are still using the system console, you will be notified of a &#8220;System UAF record modification&#8221; security event because we changed the password of a user.  </p>

<p>Now that we&#8217;re logged in, we want to enable our full system privileges. This is done by running &#8220;<strong>set proc&#47;priv=all</strong>&#8221;. This is like running &#8220;su&#8221; on a UNIX-like system, except that we will still be the same user - just with &#8220;superuser&#8221; powers.</p>

<pre><code>$ set proc&#47;priv=all
</code></pre>

<p><a href="http://www.wherry.com/">Phil Wherry</a> was a great help with the following, as before reading his tips - I had never installed OpenVMS and additional components from scratch, only used existing systems. We are going to be installing the OpenVMS TCP&#47;IP stack+programs, this will require us to modify resource allocations within the system. We need to edit <strong>modparams.dat</strong> in <strong>sys$system</strong>:</p>

<pre><code>$ set def sys$system
$ edit modparams.dat
</code></pre>

<p>The following lines should be added to the end of the file, save+exit by pressing CTRL-Z:</p>

<pre><code>ADD_GBLPAGES=10000
ADD_GBLSECTIONS=100
ADD_NPAGEDYN=800000
ADD_NPAGEVIR=800000
MIN_SPTREQ=6000
</code></pre>

<p>Now, these changes to the system won&#8217;t take affect straight away. You may remember earlier on that the OpenVMS Installation ran &#8220;AUTOGEN&#8221; to update the system. We will now run it manually:</p>

<pre><code>$ set def sys$update
$ @autogen getdata reboot nofeedback

%AUTOGEN-I-BEGIN, GETDATA phase is beginning.
%AUTOGEN-I-NEWFILE, A new version of SYS$SYSTEM:PARAMS.DAT has been created.
        You may wish to purge this file.
%AUTOGEN-I-END, GETDATA phase has successfully completed.
%AUTOGEN-I-BEGIN, GENPARAMS phase is beginning.
%AUTOGEN-I-NEWFILE, A new version of SYS$MANAGER:VMSIMAGES.DAT has been created.
        You may wish to purge this file.

~~
</code></pre>

<p>After many more messages, the system will shutdown and you will be back at the SIMH prompt. &#8220;<strong>boot cpu</strong>&#8221; then &#8220;<strong>boot dua0</strong>&#8221; again. To bring up the system again. Finally, login with your user-account and &#8220;<strong>set proc&#47;priv=all</strong>&#8221;. We will then set some additional system parameters and shutdown the system again. As Phil said, these two processes could be done with only 1 reboot - but it&#8217;s more clear this way and will help remind you that a reboot &#47;is&#47; required after such alterations to the system.</p>

<pre><code>$ set proc&#47;priv=all
$ r sys$system:sysgen
SYSGEN&#62;  SET INTSTKPAGES 20
SYSGEN&#62;  WRITE CURRENT
SYSGEN&#62;  EXIT
$ @sys$system:shutdown
</code></pre>

<p>Bring up the system again, and login.  </p>

<p><strong>Installing the OpenVMS TCP&#47;IP Stack+Programs</strong>  </p>

<p>Multiuser operating systems these days are mostly useless without a TCP&#47;IP stack, and a way for remote users to login. Now we will install the PAK for TCP&#47;IP and install it.</p>

<pre><code>$ set proc&#47;priv=all
$ mount&#47;over=id dua3:
MOUNT-I-WRITELOCK, volume is write locked
%MOUNT-I-MOUNTED, VAXVMS073 mounted on _CGXVAX$DUA3:
$ set def dua3:[tcpip_vax051.kit]
</code></pre>

<p>Traditionally, CD-ROMs are mounted by specifying the device and volume-ID. Providing the &#8220;&#47;over=id&#8221; parameter instructs mount to mount the volume, ignoring the name of the volume. If you now execute &#8220;DIR&#8221; (&#8220;DIRECTORY&#8221;), you can see the contents of ua3:[tcpip_vax051.kit]:</p>

<pre><code>$ dir
Directory DUA3:[TCPIP_VAX051.KIT]

DEC-VAXVMS-TCPIP-V0501-15-1.PCSI;1      

Total of 1 file.
</code></pre>

<p>As you can see, there is 1 file in this directory and it has a .PCSI extension. This is handled by the POLYCENTER Software Installation Utility. OpenVMS applications generally come in 1 of 3 kit formats:</p>

<ul>
<li>  <strong>PCSI</strong> - These are installed with the &#8220;product install&#8221; command</li>
<li>  <strong>VMSINSTAL</strong> - These are 1 or more files with a sequential extension beginning with .A</li>
<li>  <strong>Self-Extracting</strong> - The extension can vary, usually something like SFX<em>AXPEXE, SFX</em>I64EXE or SFX_VAXEXE</li>
</ul>

<p>Anyway, to get back to our installation - we first need to install the <strong>UCX</strong> PAK. Refer to your OpenVMS Hobbyist e-mail with your licenses and paste it in:</p>

<pre><code>$ $ LICENSE REGISTER UCX -
_$ &#47;ISSUER=OPENVMS_HOBBYIST -
_$ &#47;AUTHORIZATION=DECUS-XXX-#########-####### -
_$ &#47;PRODUCER=DEC -
_$ &#47;UNITS=0 -
_$ &#47;TERMINATION_DATE=##-XXX-####  -
_$ &#47;ACTIVITY=CONSTANT=100 -
_$ &#47;CHECKSUM=#-XXXX-XXXX-XXXX-XXXX

$ license load UCX
%LICENSE-I-LOADED, DEC UCX was successfully loaded with 0 units
</code></pre>

<p>Proceed to install the kit by issuing: &#8220;**product install ***&#8221; this will scan the current directory for all packages to install - as there is only one, we don&#8217;t need to select which we want and don&#8217;t want:</p>

<pre><code>$ product install *

The following product has been selected:
    DEC VAXVMS TCPIP V5.1-15               Layered Product

Do you want to continue? [YES] YES

When prompted, go for the default options.

The following product will be installed to destination:
    DEC VAXVMS TCPIP V5.1-15               DISK$OVMSVAXSYS:[VMS$COMMON.]

Portion done: 0% ~
%PCSI-I-PRCOUTPUT, output from subprocess follows ...
% - HELP has been updated. You may purge SYS$COMMON:[SYSHLP]HELPLIB.HLB 
% 
%PCSI-I-PRCOUTPUT, output from subprocess follows ...
% TCPIP-W-PCSI_INSTALL 
% - Execute SYS$MANAGER:TCPIP$CONFIG.COM to proceed with configuration of
%   Compaq TCP&#47;IP Services.
% 
Portion done: 100%

The following product has been installed:
    DEC VAXVMS TCPIP V5.1-15               Layered Product

DEC VAXVMS TCPIP V5.1-15: Compaq TCP&#47;IP Services for OpenVMS.
</code></pre>

<p>Excellent. We now have TCP&#47;IP Services installed as well as a PAK loaded so we can actually use it (remember how I mentioned limitations if you didn&#8217;t have licenses earlier?).  </p>

<p>As recommended by the installation, we will run </p>

<pre><code>SYS$MANGER:TCPIP$CONFIG.COM
</code></pre>

<p>to configure TCP&#47;IP on our system.</p>

<pre><code>$ @sys$manager:tcpip$config

TCP&#47;IP Network Configuration Procedure

This procedure helps you define the parameters required
to run Compaq TCP&#47;IP Services for OpenVMS on this system. 

*CLS*

Compaq TCP&#47;IP Services for OpenVMS Configuration Menu

    Configuration options:

         1  -  Core environment
         2  -  Client components   
         3  -  Server components   
         4  -  Optional components

         5  -  Shutdown Compaq TCP&#47;IP Services for OpenVMS
         6  -  Startup Compaq TCP&#47;IP Services for OpenVMS
         7  -  Run tests

         A  -  Configure options 1 - 4
        [E] -  Exit configuration procedure

Enter configuration option: 
</code></pre>

<p>We start by configuring the core environment. I won&#8217;t paste all menus here, just the prompts to save space.</p>

<pre><code>Enter configuration option: 1

    DOMAIN Configuration

    Enter Internet domain: cgx.org.uk

Enter configuration option: 2

    QE0 is the Ethernet device XQA0:

    QE0 has not been configured

    Compaq TCP&#47;IP Services for OpenVMS Interface QE0 Configuration Menu

    Configuration options:

         1  -  Configure interface manually       
         2  -  Let DHCP configure interface       

        [E] -  Exit menu (Do not configure interface QE0)

Enter configuration option: 1
Enter fully qualified host name: cgxvax.cgx.org.uk
Enter Internet address for cgxvax: 10.0.0.200
Enter Internet network mask for cgxvax [255.0.0.0]: [enter]
Enter broadcast mask for cgxvax [10.255.255.255]: [enter]
* Is the above correct [YES]: YES
</code></pre>

<p>We have now set the domain for our system, as well as manually configured the ethernet interface manually. You can configure this as you please of course.  </p>

<p>Next we&#8217;ll configure basic routing. At the moment, we wouldn&#8217;t really want to use our system as a router, though the Compaq TCP&#47;IP services does support a variety of protocols.</p>

<pre><code>* Do you want to configure dynamic ROUTED or GATED routing [NO]: NO

    A default route has not been configured.
* Do you want to configure a default route [YES]: YES
Enter your Default Gateway host name or address: 10.0.0.1

    10.0.0.1 is not in the local host database.
    If you want to enter the default gateway in the local host
    database, enter its host name. Otherwise, enter .

Enter the Default Gateway host name []: [ENTER]

Next, to resolve hostnames we will need to specify a nameserver.

Enter configuration option: 4
Enter your BIND server name: 10.0.0.1
Enter remote BIND server name []: [enter]
Enter next BIND server name: [enter]

Enter configuration option: E

Now that the core configuration is complete, we can enable telnet:

Enter configuration option: 2
Enter configuration option: 6
TELNET Configuration

Service is not defined in the TCPIP$SERVICE database.
Service is not enabled.
Service is stopped.

    TELNET configuration options:

         1 - Enable service on this node

        [E] - Exit TELNET configuration

Enter configuration option: 1
Creating TELNET Service entry
</code></pre>

<p>You should enable FTP from the client menu also, then exit to the main menu. Once at the main menu, chose option #6 to startup TCP&#47;IP services.</p>

<pre><code>6 - Startup Compaq TCP&#47;IP Services for OpenVMS

Begin Startup...

%TCPIP-I-INFO, TCP&#47;IP Services startup beginning at 10-JAN-2009 01:30:04.47
%TCPIP-I-INFO, creating UCX compatibility file SYS$COMMON:[SYSEXE]UCX$SERVICE.DAT
%TCPIP-I-NORMAL, timezone information verified
</code></pre>

<p>More messages will follow, you will then be prompted to &#8220;Press Resturn to continue&#8221;. Finally exit, and press &#8216;Y&#8217; when prompted to start your services (if not already started). You should now be able to connect to your system using telnet and FTP (though, not from the host system! This is a flaw in winpcap&#47;libpcap not in OpenVMS or SIMH).  </p>

<p>Finally, add </p>

<blockquote>
<p><code>$ @sys$startup:tcpip$startup</code></p>
</blockquote>

<p>to the &#8216;<strong>sys$manager:systartup_vms.com</strong>&#8217; file to enable TCP&#47;IP services to run at boot-time.  </p>

<p>Stay tuned for part 2, where we will learn more about OpenVMS, DCL and installing more software including 3rd-party products from <a href="http://www.process.com/">Process Software</a> as well as useful tools you&#8217;re familiar with such as <a href="http://www.gnu.org/software/wget/">wget</a>.  </p>

<p><strong>References and Links</strong></p>

<ul>
<li>  <a href="http://en.wikipedia.org/">http:&#47;&#47;en.wikipedia.org</a></li>
<li>  <a href="http://simh.trailing-edge.com/">http:&#47;&#47;simh.trailing-edge.com</a></li>
<li>  <a href="http://www.openvmshobbyist.com/">http:&#47;&#47;www.openvmshobbyist.com</a></li>
<li>  <a href="http://connect-community.de/">http:&#47;&#47;connect-community.de</a></li>
<li>  <a href="http://www.wherry.com/">http:&#47;&#47;www.wherry.com</a></li>
<li>  <a href="https://web.archive.org/web/20090312034321/http://64.223.189.234/">http:&#47;&#47;64.223.189.234</a>  (HoffmanLabs)</li>
</ul>

]]></description>
</item>
</channel></rss>
